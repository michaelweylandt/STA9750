{
  "hash": "613c9b2abb4bcd6aebb5484c8ea6d764",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{{< var course.short >}} Mini-Project #{{< meta mp_num >}}: {{< meta mp_title >}}\"\nformat:\n  html:\n    code-link: true\necho: true\nmp_num: \"03\"\nmp_title: \"Creating the Ultimate Playlist\"\nfilters: \n - list-table\nengine: knitr\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Due Dates\n\n-   Released to Students: 2025\\-03\\-20\n-   **Initial Submission: 2025\\-04\\-23 11:45pm ET on GitHub and Brightspace**\n-   **Peer Feedback:**\n    -   Peer Feedback Assigned: 2025\\-04\\-24 on GitHub\n    -   **Peer Feedback Due: 2025\\-04\\-30 11:45pm ET on GitHub**\n\n*Estimated Time to Complete: 5 Hours*\n\n*Estimated Time for Peer Feedback: 1 Hour*\n\n\n------------------------------------------------------------------------\n\n## Introduction\n\nWelcome to Mini-Project #{{< meta mp_num >}}! In this project, you will dive\ninto the world of music analytics in an attempt to create **The Ultimate\nPlaylist.** Specifically, we will explore two data exports made available\nby Spotify to identify i) the most popular songs on the platform and ii) the\ncharacteristics of those songs. From this data, you will create the ultimate\nplaylist. Note that, while this project is inspired by the work of the [Great Sage, Mr Barney \nStinson](https://www.youtube.com/watch?v=f1gjcVD3D1s), pioneer of the \n\"All Rise\" playlist, you can create whatever type of playlist you want, as\nlong as it is **Ultimate**. \n\nAlso note that this mini-project is intended to be a bit less demanding than\n[Mini-Project #02](./mini02.html). At this point in the course, you should be\ndiving into your [Course Project](../project.html), which should consume the\nmajority of your out-of-class time dedicated to this course for the remainder of\nthe semester.\n\n\n### Student Responsbilities\n\nRecall our basic analytic workflow and table of student responsibilities:\n\n-   Data Ingest and Cleaning: Given a single data source, read it into `R` and transform it to a reasonably useful standardized format.\n-   Data Combination and Alignment: Combine multiple data sources to enable insights not possible from a single source.\n-   Descriptive Statistical Analysis: Take a data table and compute informative summary statistics from both the entire population and relevant subgroups\n-   Data Visualization: Generate insightful data visualizations to spur insights not attainable from point statistics\n-   Inferential Statistical Analysis and Modeling: Develop relevant predictive models and statistical analyses to generate insights about the *underlying population* and not simply the data at hand.\n\n+----------------------+---------------------+---------------------------+----------------------------------+---------------+\n|                      | Ingest and Cleaning | Combination and Alignment | Descriptive Statistical Analysis | Visualization |\n+:====================:+:===================:+:=========================:+:================================:+:=============:+\n| **Mini-Project #01** |                     |                           | **✓**                            |               |\n+----------------------+---------------------+---------------------------+----------------------------------+---------------+\n| **Mini-Project #02** |                     | **✓**                     | **✓**                            | **½**         |\n+----------------------+---------------------+---------------------------+----------------------------------+---------------+\n| **Mini-Project #03** | **½**               | **✓**                     | **✓**                            | **✓**         |\n+----------------------+---------------------+---------------------------+----------------------------------+---------------+\n| **Mini-Project #04** | **✓**               | **✓**                     | **✓**                            | **✓**         |\n+----------------------+---------------------+---------------------------+----------------------------------+---------------+\n\n: Students' Responsibilities in Mini-Project Analyses {.hover}\n\nIn this project, I am no longer providing code to download and read the necessary data files. The data files I have selected for this mini-project are relatively easy to work with and should not provide a significant challenge, particularly after our in-class discussion of Data Import. See the modified rubric below which now includes a grade for data import.\n\n### Rubric\n\n{{< var course.short >}} Mini-Projects are evaluated using *peer grading* with *meta-review* by the course GTAs. Specifically, variants of the following rubric will be used for the mini-projects:\n\nn| Course Element        | Excellent (9-10)                                                                                                                                                                            | Great (7-8)                                                                                                                                                     | Good (5-6)                                                                                            | Adequate (3-4)                                                                                                                                             | Needs Improvement (1-2)                                                                             | Extra Credit                                                                                   |\nn| Written Communication | Report is well-written and flows naturally. Motivation for key steps is clearly explained to reader without excessive detail. Key findings are highlighted and appropriately given context. | Report has no grammatical or writing issues. Writing is accessible and flows naturally. Key findings are highlighted, but lack suitable motivation and context. | Report has no grammatical or writing issues. Key findings are present but insufficiently highlighted. | Writing is intelligible, but has some grammatical errors. Key findings are obscured.                                                                       | Report exhibits significant weakness in written communication. Key points are difficult to discern. | Report includes extra context beyond instructor provided information.                          |\nn| Project Skeleton      | Code completes all instructor-provided tasks correctly. Responses to open-ended tasks are particularly insightful and creative.                                                             | Code completes all instructor-provided tasks satisfactorially.                                                                                                  | Response to one instructor provided task is skipped, incorrect, or otherwise incomplete.              | Responses to two instructor provided tasks are skipped, incorrect, or otherwise incomplete.                                                                | Response to three or ore instructor provided tasks are skipped, incorrect, or otherwise incomplete. | Report exhibits particularly creative insights drawn from thorough student-initiated analyses. |\nn| Formatting & Display  | Tables and figures are full 'publication-quality'.                                                                                                                                          | Tables have well-formatted column names, suitable numbers of digits, and attractive presentation.                                                               | Tables are well-formatted, but still have room for improvement.                                       | Tables lack significant 'polish' and need improvement in substance (filtering and down-selecting of presented data) or style.                              | Unfiltered 'data dump' instead of curated table.                                                    | Report includes interactive (not just animated) visual elements.                               |\n|                       |                                                                                                                                                                                             |                                                                                                                                                                 |                                                                                                       |                                                                                                                                                            |                                                                                                     |                                                                                                |\n|                       | Report includes at least one animated visualization designed to effectively communicate findings.                                                                                           | Figures are 'publication-quality', with suitable axis labels, well-chosen structure, attractive color schemes, titles, subtitles, and captions, *etc.*          | Figures are above 'exploratory-quality', but do not reach full 'publication-quality'.                 | Figures are suitable to support claims made, but are 'exploratory-quality', reflecting minimal effort to customize and 'polish' beyond `ggplot2` defaults. | Baseline figures that do not fully support claims made.                                             |                                                                                                |\nn| Code Quality          | Code is (near) flawless.                                                                                                                                                                    | Comments give context of the analysis, not simply defining functions used in a particular line.                                                                 | Code has well-chosen variable names and basic comments.                                               | Code executes properly, but is difficult to read.                                                                                                          | Code fails to execute properly.                                                                     | Code takes advantage of advanced `Quarto` features to improve presentation of results.         |\n|                       |                                                                                                                                                                                             |                                                                                                                                                                 |                                                                                                       |                                                                                                                                                            |                                                                                                     |                                                                                                |\n|                       | Code passes all `styler` and `lintr` type analyses without issue.                                                                                                                           |                                                                                                                                                                 |                                                                                                       |                                                                                                                                                            |                                                                                                     |                                                                                                |\n+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------+\n| Data Preparation      | Data import is fully-automated and efficient, taking care to only download from web-sources if not available locally.                                                                       | Data is imported and prepared effectively, in an automated fashion with minimal hard-coding of URLs and file paths.                                             | Data is imported and prepared effectively, though source and destination file names are hard-coded.   | Data is imported in a manner likely to have errors.                                                                                                        | Data is hard-coded and not imported from an external source.                                        | Report uses additional data sources in a way that creates novel insights.                      |\nn\n: Mini-Project Grading Rubric\n\nNote that this rubric is designed with copious opportunities for extra credit if students go *above and beyond* the instructor-provided scaffolding. Students pursuing careers in data analytics are strongly encouraged to go beyond the strict ambit of the mini-projects to i) further refine their skills; ii) learn additional techniques that can be used in the final course project; and iii) develop a more impressive professional portfolio.\n\nBecause students are encouraged to use {{< var course.short >}} mini-projects as the basis for a professional portfolio, the basic skeleton of each project will be released under a fairly permissive usage license. Take advantage of it!\n\n### Submission Instructions\n\nAfter completing the analysis, write up your findings, *showing all of \nyour code*, using a dynamic `quarto` document and post it to your course\nrepository. The `qmd` file should be named `mp03.qmd` so the rendered\ndocument can be found at `docs/mp03.html` in the student's repository\nand served at the URL:[^sub]\n\n> `https://<GITHUB_ID>.github.io/{{< var course.repo >}}/mp{{< meta mp_num >}}.html`\n\nOnce you confirm this website works (substituting `<GITHUB_ID>` for the actual GitHub username provided to the professor in [MP#00](./mini00.html) of course), open a new issue at\n\n> `https://github.com/michaelweylandt/{{< var course.repo >}}/issues/new` .\n\nTitle the issue `{{< var course.short >}} <GITHUB_ID> MiniProject #{{< meta mp_num >}}` and fill in the following text for the issue:\n\n\n::: {#submission-text}\n\n```         \nHi @michaelweylandt!\n\nI've uploaded my work for MiniProject #**{{< meta mp_num >}}** - check it out!\n\nhttps://<GITHUB_ID>.github.io/{{< var course.repo >}}/mp{{< meta mp_num >}}.html\n```\n\n:::\n\n\n\nOnce the submission deadline passes, the instructor will tag classmates\nfor peer feedback in this issue thread.\n\n*Additionally*, a PDF export of this report should be submitted on Brightspace.\nTo create a PDF from the uploaded report, simply use your browser's 'Print to PDF'\nfunctionality.\n\n**NB**: The analysis outline below specifies key *tasks* you need to perform\nwithin your write up. Your peer evaluators will check that you complete these.\nYou are encouraged to do extra analysis, but the bolded **Tasks** are *mandatory*.\n\n**NB**: Your final submission should look like a *report*, not simply a list\nof facts answering questions. Add introductions, conclusions, and your own\ncommentary. You should be practicing both raw *coding* skills and written\n*communication* in all mini-projects. There is little value in data points\nstated without context or motivation.\n\n\n[^sub]: Throughout this section, replace `<GITHUB_ID>` with your GitHub ID from\n[Mini-Project #00](./mini00.html), making sure to remove the angle brackets. Note\nthat the automated course infrastructure will be looking for precise formatting,\nso follow these instructions closely. \n\n\n## Mini-Project #{{< meta mp_num >}}: {{< meta mp_title >}}\n\n### Data Acquisition\n\nWe will use two Spotify data exports: \n\n1) A data set of songs and their characteristics\n2) An export of user-created playlists\n\nInterestingly, Spotify no longer makes these datasets available directly, but\nnothing ever leaves the internet and we can use mirrors of the original data\nposted by other data scientists. \n\n### Song Characteristics\n\nFirst, we can download the song properties data from the mirror posted by\nGitHub user **gabminamendez**. Download the data and import it into `R`. \n\n::: {.callout-tip title=\"Task 1: Song Characteristics Dataset\"}\n\nWrite a function called `load_songs` to \n\n  i)  download the Spotify song analytics dataset (if needed) from\n      [https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv](https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv)\n  ii) read it into `R`. \n  \nYour function should return a well-formatted data frame. \n\nTo be responsible, your download code should: \n\n1) Only download the file if it is not already present\n2) Create a directory titled `data/mp03` if one is not already present\n3) Save the file in `data/mp03` and, if necessary, decompress it. \n4) Use built-in `R` functions like `download.file`\n\nSee prior mini-projects for examples of responsible downloading code.  \n\n:::\n\nThe `artists` column of this data set is a bit oddly formatted: it contains\nmultiple artists in a \"list-type\" format: *e.g.*, the song \"Blinding Lights\"\nhas `artists` as `['The Weeknd']` and the song \"Uptown Funk (feat. Bruno Mars)\"\nhas `artists` as `['Mark Ronson', 'Bruno Mars']`. The following code will split\nthe `artists` across multiple rows, yielding *e.g.*, two rows for Uptown Funk,\none each for Mark Ronson and Bruno Mars. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(stringr)\nclean_artist_string <- function(x){\n    str_replace_all(x, \"\\\\['\", \"\") |> \n        str_replace_all(\"'\\\\]\", \"\") |>\n        str_replace_all(\" '\", \"\")\n}\nSONGS |> \n  separate_longer_delim(artists, \",\") |>\n  mutate(artist = clean_artist_string(artists)) |>\n  select(-artists)\n```\n:::\n\n\n\nAdapt it as needed for your analysis.\n\n### Playlists \n\nNext, we'll download the Spotify Million Playlist dataset from GitHub user\n**DevinOgrady**. Because this dataset is large, **DevinOgrady** has uploaded\nit as a series of JSON files in his\n[`spotify_million_playlist_dataset`](https://github.com/DevinOgrady/spotify_million_playlist_dataset/tree/main)\nrepository. Write a function to download all files from this repository\n(`data1` directory), store them locally, and read them into `R`. As above,\nyour download function should be responsible (only downloading the data once\nas needed). \n\n::: {.callout-tip title=\"Task 2: Playlist Dataset\"}\n\n\nWrite a function called `load_playlists` to \n\n  i)  download the Spotify million playlist dataset (if needed);\n  ii) read all files into `R`; and\n  iii) concatenate them into a list object. \n  \nAs before, your download code should be \"responsible\" and avoid unnecessary\nduplicate downloads. (If your code is not 'responsible', GitHub may put a\nshort-term block up to stop you from making too many requests. Be careful!)\n\nYou **may not** hard-code invidual file names. You need to use a loop-type\nconstruct and create individual file names programmatically. \n\n:::\n\nUnlike the song characteristics data, this is *hierarchical* data, not\ntrivially represented as a tidy data frame. To proceed we will need to \nprocess the playlists data into a more standard format. In particular, we \nwant a table of the following columns:\n\n- Playlist Name (`playlist_name`)\n- Playlist ID (`playlist_id`)\n- Playlist Position (`playlist_position`)\n- Playlist Followers (`playlist_followers`)\n- Artist Name (`artist_name`)\n- Artist ID (`artist_id`)\n- Track Name (`track_name`)\n- Track ID (`track_id`)\n- Album Name (`album_name`)\n- Album ID (`album_id`)\n- Duration (`duration`)\n\nwhere each row is one \"track\" from a playlist. (Certain songs will be repeated\nbecause they appear on multiple playlists.)\n\n::: {.callout-tip title=\"Task 3: 'Rectangle' the Playlist Data\"}\n\nUsing functions from the `tidyr`, `purrr`, and `dplyr` packages, convert\nthe playlist data from Task 2 into the rectangular format described above. \n\nTo clean up the ID columns, you can use the following function to strip the\n`spotify:type:` prefix. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstrip_spotify_prefix <- function(x){\n    library(stringr)\n    str_extract(x, \".*:.*:(.*)\", group=1)\n}\n```\n:::\n\n\n\n:::\n\n### Initial Exploration\n\nNow that your data is imported and cleaned, it is time to begin exploring\nit and seeing how comprehensive it is. (Note that these exports were created\nat different times, so they will not have fully overlapping coverage.)\n\n::: {.callout-tip title=\"Task 4: Initial Exploration\"}\n\n1. How many distinct tracks and artists are represented in the playlist data? \n2. What are the 5 most popular tracks in the playlist data? \n3. What is the most popular track in the playlist data that *does not have a\n   corresponding entry in the song characteristics* data? \n4. According to the song characteristics data, what is the most \"danceable\" \n   track? How often does it appear in a playlist? \n5. Which playlist has the longest average track length?\n6. What is the most popular playlist on Spotify? \n\n:::\n\n### Identifying Characteristics of Popular Songs\n\n::: {.callout-note title=\"Inner Join to Combine Data Sets\"}\n\nFor the remainder of this assignment, I recommend using an `inner_join` to\ncombine the playlist and song characteristic data sets. This will throw out\na (potentially large) fraction the playlist data, but given the timing and\nconstruction of these data exports, it is the best we can do.\n\n:::\n\nNext, we will *visually* explore this data, with an eye towards finding \ncharacteristics of the most popular songs on Spotify. \n\n::: {.callout-tip title=\"Task 5: Visually Identifying Characteristics of Popular Songs\"}\n\nAnswer the following questions using one or more visualizations. Make sure\nyour plots are \"publication-quality\", with well-formatted axes, color schemes,\n*etc.*\n\n1. Is the `popularity` column correlated with the number of playlist \n   appearances? If so, to what degree? \n   \n   For the following questions, select a threshold that defines a \"popular\"\n   song. There's no 'right' answer here, but I would recommend finding a song\n   that is right \"at the line\" of being popular *per* your threshold and seeing\n   if you consider it \"almost popular.\" If it's a very popular song, adjust\n   your threshold lower; if it's obscure, adjust your threshold higher. \n2. In what year were the most popular songs released? \n3. In what year did danceability peak? \n4. Which decade is most represented on user playlists? (The integer\n   division (`%/%`) operator may be useful for computing decades from\n   years.)\n5. Create a plot of key frequency among songs. Because musical keys exist in\n   a 'cycle', your plot should use polar (circular) coordinates. \n6. What are the most popular track lengths? (Are short tracks, long tracks,\n   or something in between most commonly included in user playlists?)\n7. Pose and visually answer at least two more other exploratory questions.\n:::\n\nNote that you can answer many of these using `dplyr` functions only, but\na learning objective of this mini-project is to practice creating informative\nvisualizations, so you are required to include at least one plot for each of\nthese questions. If helpful, you can validate your visual findings with a \ndescriptive statistic: *e.g.*, if your plot shows a positive correlation between\ntrack length and popularity, you can also compute this correlation numerically\nand include it in your text. \n\n### Building a Playlist from Anchor Songs\n\nTo begin building your playlist, pick one or two \"anchor\" songs that you \nlike. (You can adjust these if you don't like how your playlist comes out.)\n\nYou can find songs that work well in a playlist with these songs using\nvarious heuristics: \n\n1) What other songs commonly appear on playlists along side this song? \n\n2) What other songs are in the same key[^key] and have a similar tempo? \n   (This makes it easy for a skilled DJ to transition from one song to the\n    next.)\n\n3) What other songs were released by the same artist? \n\n4) What other songs were released in the same year and have similar\n   levels of `acousticness`, `danceability`, *etc.*? \n\n::: {.callout-tip title=\"Task 6: Finding Related Songs\"}\n\nImplement the four heuristics above plus one of your own to find potential\nsongs that belong on a playlist with your anchor songs. You should identify\nat least 20 candidates, at least 8 of which are not \"popular\" based on the\nthreshold you set above. \n\n:::\n\n### Create Your Playlist\n\nGiven your anchor songs and playlist candidates, it is now time to filter \ndown to a playlist of around 12 songs, suitably ordered. Using all the\ndata available to you, determine an optimal playlist. Your playlist should\ninclude at least 2 songs you were not previously familiar with and at least 3 \nwhich are not \"popular.\"\n\nOnce you have created your playlist, visualize its evolution on the various\nquantitative metrics Spotify provides. Does it, *per Stinson*, 'rise and fall'\nor is it 'all rise'? \n\n::: {.callout-tip title=\"Task 7: Curate and Analyze Your Ultimate Playlist\"}\n\nCurate and Analyze the Ultimate Playlist per instructions above. In addition\nto its musical structure, make sure to consider thematic unity, *e.g.*, songs\nabout cars, and to give your playlist a creative name.\n\n:::\n\n## Deliverable: The Ultimate Playlist\n\nNow that you have created the Ultimate Playlist, it is time to nominate it\nfor the Internet's Best Playlist award. Write a title, description, and\n\"design principles\" for your playlist. Make sure to include at least\none visualization that argues why your playlist is Ultimate. Describe how\nyou used statistical and visual analysis to create this playlist, taking\npride to showcase lesser known pieces that are integral to your playlist\nstructure. \n\n## Extra Credit\n\nIn addition to the rubric-specified extra credit, extra credit may be given\nfor the following: \n\n- Up to 2 points: use of Quarto's [video\n  support](https://quarto.org/docs/authoring/videos.html) to embed recordings\n  of tracks from the playlist. \n\n\n[^key]: As coded by the `key` column, 0 is C, 1 is C#, 2 is D, *etc.* For \nnon-musicians, this just means that the two songs share some harmonic structure\nthat makes it easy to tie them together. \n\n------------------------------------------------------------------------\n\nThis work ©2025 by [Michael Weylandt](https://michael-weylandt.com) is licensed\nunder a [Creative Commons BY-NC-SA \n4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en) license.\n![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png){width=\"10%\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}