{
  "hash": "15dd4a33c1210741255834203c67a477",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{{< var course.short >}} Mini-Project #{{< meta mp_num >}}: {{< meta mp_title >}}\"\nmp_num: \"00\"\nmp_title: \"Course Set-Up\"\nengine: knitr\n---\n\n\n\n\n\nIn lieu of traditional homework, this course has a set of four *mini-projects*,\nwhich will be assessed in two stages. In the first, you will complete a small \ndata analysis project[^1]; after submission of your analysis, it will be assigned\nto a classmate, who will evaluate it according to an instructor-provided rubric.\nThis *peer feedback* stage is an opportunity to see how your classmates answered\nquestions and to compare it to your own response. In doing so, you will learn to\nevaluate data science work product and will develop a critical eye that can be\nturned to your own work.\n\nThis *mini-project*, however, is a *meta-mini-project*, designed to help\nyou set up the course infrastructure you will use for the four graded\nmini-projects.\n\n**NB: Mini-Project #{{< meta mp_num >}} is not graded, but it is required. For\n{{< var course.short >}},  it serves as the legally mandated\n[*Verification of Enrollment*](https://enrollmentmanagement.baruch.cuny.edu/registrar/verification-of-enrollment/) \nactivity. If it is not completed on time, you may be involuntarily disenrolled from the course.** \n\n### Due Dates\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n-   Released to Students: 2025\\-01\\-30\n-   **Initial Submission: 2025\\-02\\-12 11:45pm ET on GitHub and Brightspace**\n-   **Peer Feedback:**\n    -   Peer Feedback Assigned: 2025\\-02\\-13 on GitHub\n    -   **Peer Feedback Due: 2025\\-02\\-19 11:45pm ET on GitHub**\n\n\n*Estimated Time to Complete: 2 Hours*\n\n*Estimated Time for Peer Feedback: 1 Hour*\n\n---\n\nThis course will use the industry-standard code sharing platform [`GitHub`](https://github.com). \nMini-projects and course-projects will be submitted by posting to a\nrelevant GitHub project and creating a world-readable HTML page. A secondary\ngoal of this course is to help students build a web-presence and a data science\nportfolio, giving you a place to showcase your skills to potential employers. \nThe four mini-projects and the final course project should form an excellent\nbasis for a portfolio. The main aim of Mini-Project #{{< meta mp_num >}} is\nto set up the \"skeleton\" of this portfolio. \n\nYou may choose to complete these tasks under a [*pseudonym*](https://en.wikipedia.org/wiki/Pseudonym) if you do not want\ncurrent or potential employers, classmates, or the world at large to see your\nwork. You will be required to disclose your pseudonym to the instructor. If you\nchoose to use a pseudonym, it will be straightforward to add your name to any\nor all coursework after the semester ends. Within the course, you\nwill have the option to switch to a pseudonym as desired, but it is difficult\nto fully anonymize anything once it has been posted on the public internet. \nWith all those cautions, please take a moment to reflect as to whether you wish\nto proceed under your own name or using a pseudonym. \n\n## Step 0: Install `git`\n\nYou first need to make sure you have `git` installed on your computer. You may\nalready have it, but if you don't the following steps can make sure it is \ninstalled. To check if it is installed, open a Terminal and run `git` (Mac)\nor `git.exe` (Windows). If you get a message other than \"not found\", you should\nbe good to go. \n\nFor more detailed instructions, see [Chapter 6](https://happygitwithr.com/install-git)\nof the [Happy Git with R](https://happygitwithr.com) book.\n\n### Windows\n\nIf you are on a Windows machine, install `git` using the [Git for\nWindows](https://gitforwindows.org/) bundle. \n\n### Mac\n\nIf you are on a Mac, run the following command at the Terminal: \n\n> `xcode-select --install`\n\nThis will prompt you to install the \"XCode Command Line Tools\" which include\ngit. \n\n\n\n\n\n## Stage 1: GitHub Account Creation\n\nTo complete this course, you will need a free `GitHub` personal account, which \nyou can create [here](https://github.com/signup). Please note that whatever \naccount name you use will be public, so you need to define a pseudonym here\nif you choose to use one.\n\n## Stage 2: Course Repo Creation\n\n### Creating GitHub Repo\n\nNow that you have created a GitHub account, log in and proceed to your dashboard\nat [https://github.com](https://github.com). In the top right corner, \nclick the `+` symbol and select \"New Repository.\"[^2][^year]\n\n![](../images/gh_topbar.png) \n\nCreate a new repository named `{{< var course.repo >}}` with a suitable description. \n\n![](../images/gh_new_repo.png) \n\nThis repo needs to be *public*. You do not need to select a `README`, \n`.gitignore`, or a license at this time. \n\nAfter you create your repo, you should see a page like this: \n\n![](../images/empty_repo.png)\n\nNote the URL highlighted in the main box: \n\n``**https://github.com/<GITHUB_ID>/{{< var course.repo >}}.git**``\n\nYou will need this in the next step.\n\n[^year]: Note that these images are taken from a previous offering of this course.\nUpdate to the current semester as appropriate. \n\n### Connecting GitHub Repo to RStudio\n\nNow that you have set up an *empty* repo, you need to connect it to your personal machine\nand to RStudio. RStudio's concept of [projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) roughly\nmap to GitHub repos and that is what we will use here. \n\nOpen RStudio and click the project menu in the top right corner: \n\n![](../images/project_menu.png)\n\nFollow through the menu to click: \n\n- New Project\n- Version Control\n- Git \n\nThis will take you to the following screen:\n\n![](../images/new_project_wizard.png)\n\nCopy the `.git` URL from the previous step into `Repository URL`.[^3]\n\n### Securing Connections to GitHub\n\nAn important aspect of source code management is *access control* to your code\nrepository. While it's typically no risk to make your code _world-readable_, you\ndon't want just anyone being able to add code to your repository. Traditionally,\nthis type of access would be controlled with a username+password scheme, but\nGitHub has moved to a _Access Token_ structure. \n\nThis process is a \"one-time\" task, documented in the [Connect Section](https://happygitwithr.com/connect-intro)\nof the *Happy Git with R* book, but we'll cover the highlights here. \n\n#### Git Credential Manager\n\nBefore starting, you will want to make sure you have installed the Git Credential\nManager (GCM). If you used the [Git for Windows](https://gitforwindows.org/) \nbundle, you already have GCM installed. If you are on a Mac, you can download \nthe GCM installer [directly](https://github.com/git-ecosystem/git-credential-manager/releases) \nor install GCM via the [GitHub Desktop Client](https://desktop.github.com/download/).\n\n#### GitHub Personal Access Token\n\nNext, you need to create a Personal Access Token (PAT) for GitHub. You can think\nof this as a \"special-purpose\" password. Unlike your general account password, \na PAT can be restricted to only perform certain activities or only for a limited\ntime period. \n\nThe easiest way to do so is to run the following code: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(\"usethis\")) install.packages(\"usethis\")\nusethis::create_github_token()\n```\n:::\n\n\n\n\n\nOnce you have created a token, copy and save it on your computer. (Note that you\nonly be able to copy it one time, so make sure you save it somewhere memorable.)\nThen run the following code to register the GitHub PAT on your computer: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(\"gitcreds\")) install.packages(\"gitcreds\")\ngitcreds::gitcreds_set()\n```\n:::\n\n\n\n\n\nIf that doesn't work, you can also perform the same steps \"by hand\":\n\nAfter logging in to GitHub via a web browser, visit\n[https://github.com/settings/personal-access-tokens/new](https://github.com/settings/personal-access-tokens/new)\nto begin the token creation process. Give the token a meaningful name and\ndescription and set an expiration date after (at least) the end of the semester. \n\nSet the \"Repository Access\" to \"All repositories\" and, under \n\"Permissions > Repository Permissions\", set \"Contents\" to \"Read and Write\". This\nwill now let anyone using your token _read and write_ to all your repositories.\nAfter you create your token, you will be given **only one opportunity** to copy\nit. (Note that you can change permissions later, but you can only copy the token\nonce.) Copy this and save it for later use. If you loose this token, you may need\nto generate a new one. \n\nWhen you make your first push to GitHub (as described below), use this token\nas your password. If everything is set up correctly, GCM will save this token\nand use it to authenticate you every time you push to GitHub. You should not \nneed to paste this token every time. \n\n### `.gitignore`\n\nThis course will involve many files, not all of which you will want to push\nto `GitHub`. Create a file named `.gitignore` and paste in the following to \ntell `git` to ignore certain files. (Note the leading `.` in the file name.)\n\n\n\n\n\n::: {.cell}\n\n```{.md .cell-code}\n**/.quarto/*\n.Rproj.user\ndata/**\n**/*_cache/*\n*_files/*\n**/*_freeze/*\n**/*tsv*\n**/*csv*\n**/*xlsx*\n**/*zip\n**/*pdf\n.DS_Store\n.Rhistory\n/.quarto/*\n```\n:::\n\n\n\n\n\nYou may already have a `.gitignore` file created automatically for you by \n`RStudio`. If so, simply open it (by clicking the file name in the `Files` pane\nof `RStudio`) and add the above lines at the bottom. \n\n### Additional `git` configuration\n\nYou will, from time to time, need to send somewhat large files to GitHub, \nprimarily high-resolution figures. Since `git` is primarily designed for \nsmall-ish text files (code), this can be a bit tricky, but you can increase\nthe maximum transferrable size by running the following command at the \n`Terminal`. \n\n```\ngit config --global http.postbuffer 524288000\n```\n\nThis only increases a limit - you might still run into problems with\nexceptionally large files, *esp.* data files if you do not set your `.gitignore`\nup properly - but it should avoid most problems. \n\nNext, run the following at the `Terminal`:\n\n```\ngit config --global init.defaultBranch main\n```\n\nThis will tell `git` to use the term \"main\" for your first\nbranch. We won't use branches in this course, but this\ncan eliminate some issues. \n\n### `git` Check\n\nAt this point, run the following code to check your `git` setup: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(\"usethis\")) install.packages(\"usethis\")\nusethis::git_sitrep()\n```\n:::\n\n\n\n\n\nThis will print out a large amount of helpful information, but the important\nthings to check are: \n\n- Are your name and email set correctly?\n- Is your GitHub user set correctly? \n- Does the token have the requisite \"repo\" scope? \n- Is the \"origin\" set correctly for the GitHub project? \n\n\n::: {.callout-warning title=\"Default branch mismatch between local repo and remote.\" collapse=true}\n\nCertain older versions of `git` will use the default name\n`master` for the initial branch (though the command above\nshould address this). If you get the message \n\n> `Default branch mismatch between local repo and remote.`\n\nfrom `git_sitrep()`, proceed to make your first commit (as\ndescribed below) and then run the command\n\n```\ngit branch -m main\n```\n\nThis should eliminate the above issue. Note that this command\nneeds to be run *between* making your first commit and \n*pushing* that first commit. \n\n:::\n\n\n\n### Initial Push\n\nNow, to make sure everything is working, let's save a basic `README` file and\npush it to GitHub. This is a plain text file with no particular structure. \n\nTo create it, click the new file button in RStudio (top left; piece of paper with\na green plus) and select `Text File`. RStudio will open this file in the editor: type some basic content, *e.g.*, \n\n```\nSubmission materials for {{< var course.short >}} at Baruch College. \n\nOwner: <YOURNAME>\n```\n\n(It doesn't matter what you push: whatever you type will be the default text appearing\nwhen someone visits your repo.)\n\nSave the file and open the `Git` pane in RStudio.\n\n![](../images/git_pane_nostage.png)\n\nCheck the box next to the `README` file to `stage` it for `git`.\n\n![](../images/git_pane_staged.png)\n\nThen click the  `Commit` button a type a brief message (`Initial commit` is fine). \n\n![](../images/git_precommit.png)\n\nFinally, push the  `Push` button. If everything works, you should see a screen like the below: \n\n![](../images/git_postcommit.png)\n\nTo confirm everything worked, return to the GitHub repo in your browser. You should see\nthe text of your `README` file displayed at the bottom of the page. \n\n## Stage 3: Personal Website Creation\n\nNow that you created a place where you can push files to GitHub and have successfully\npushed a basic `README`, it's time to build a webpage using [`quarto`](https://quarto.org/).\n\nWe will need three pages to build a website: \n\n1. A configuration file, `_quarto.yml`, used to specify the\n   look and layout of your website. \n2. An `index.qmd` file used to create the homepage. \n3. A build script to create the website. \n\n### Configuration File\n\nOpen a new text file and save it as `_quarto.yml`. This is a\nconfiguration file used by `quarto` to control the layout of your site. \nFor a barebones site, copy the following into `_quarto.yml`:\n\n````\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"{{< var course.short >}} Submission Material\"\n  description:\n    Course Projects for {{< var course.short >}} at Baruch College\n  site-url: \"https://<GITHUB_NAME>.github.io/{{< var course.repo >}}/\"\n  navbar:\n    background: primary\n    search: false\n    \nformat:\n  html:\n    theme: <THEME>\n    toc: false\n\neditor:\n  mode: source\n````\n\nNote that the indentation pattern is important so copy this exactly. \n\nReplace `<GITHUB_NAME>` with your GitHub user name. \n\nFor `<THEME>`, visit the [Bootswatch theme gallery](https://bootswatch.com/)\nand pick your preferred theme. Replace `<THEME>` with a lower case version\nof the theme name; if you want to use the [Sandstone\ntheme](https://bootswatch.com/sandstone/) used for this course website,\n`<THEME>` will be `sandstone` (NB: lower case) **without angle brackets**.[^brks]\nSee, *e.g.*, the [`_quarto.yml` used for this course](https://github.com/michaelweylandt/STA9750/blob/main/_quarto.yml#L41).\n\n[^brks]: Here and everywhere in this course, whenever you are replacing \na placeholder  of the form `<VALUE>` with an actual value, make sure to remove\nthe angle brackets.\n\nOnce you have created this `_quarto.yml`, stage it (click the check mark) \nin RStudio's git pane. \n\n### `index.qmd`\n\nNext, we'll build your home page, conventionally called `index.html`. We will\nnot write the HTML code by hand - it's quite cumbersome - and will instead\nlet `quarto` create it for us. Create another plain text file and save it as\n`index.qmd`. \n\nThis file will be divided into two parts, a header giving the *metadata*\nfor the site, and a body, giving the *content* of the site.\n\nFirst write the header, separated by three horizontal bars (minus signs)\nabove and below. For now, all you need to specify is a `title`: \n\n\n\n\n\n::: {.cell}\n\n```{.md .cell-code}\n---\ntitle: \"YOUR TITLE GOES HERE\"\n---\n```\n:::\n\n\n\n\n\nBelow the header, write the basic content of your website: a brief introduction\nof who you are.[^4] You can use `markdown` here for formatting. Basic text will\nsuffice, but this is also a great opportunity to include things like a personal\nheadshot, a link to a full resume, or similar. \n\nAs you work on this, click the \"Render\" button at the top of the editor pane to \nsee what your site will look like. \n\n\n### Additional Set-Up - Rendered Code\n\nIn order to make sure that your `R` and `quarto` environment has been properly\nconfigured, it is necessary to include to include a bit of `R` code in your\nsubmission. At this point in the course, you are not required to write any `R`\ncode of your own, so I've written some options here. Pick one to include\nin your submission - or modify them to do something else fun. If there's something\nelse you'd like to include, reach out to the instructor and I might be able to\nhelp you put something together. \n\nOnce you are happy with this landing page and have included on of these dynamic\ncomponents (or similar), stage it and we'll move on to building the \nwebsite properly. \n\n#### Last Updated\n\nThe following code will add a \"Last Updated:\" footer at the bottom of your page. \n\n\n\n\n\n::: {.cell}\n\n````{.md .cell-code}\n```{r}\n#| include: false\n1+1\n```\n--------------\nLast Updated: `r format(Sys.time(), \"%A %m %d, %Y at %H:%M%p\")`\n````\n:::\n\n\n\n\n\n::: {.callout-warning}\n\nNote that the `1+1` block will not actually be printed because of the \n`#| include: false` flag, but it is necessary to force `quarto` to execute\ninline code blocks. Alternatively, you can add `engine: knitr` to the\ndocument header (where the title is specified). See [Discussion at\nGithub](https://github.com/quarto-dev/quarto-cli/issues/12029) or the [Engine \nBinding](https://quarto.org/docs/computations/inline-code.html#engine-binding) \ndocumentation. \n\n:::\n\n#### Baruch Map\n\nThe following adds a map with the location of Baruch College. You can change\nthe GPS coordinates and text to another place of relevance to you.\n\n\n\n\n\n::: {.cell}\n\n````{.md .cell-code}\n```{r}\n#| echo: false\n#| message: false\n#| warning: false\n\nif(!require(\"leaflet\")){\n    options(repos=c(CRAN=\"https://cloud.r-project.org\"))\n    install.packages(\"leaflet\")\n    stopifnot(require(\"leaflet\"))\n}\n\nbaruch_longitude <- -73.98333\nbaruch_latitude  <- +40.75028\n\nleaflet() |>\n  addTiles() |>\n  setView(baruch_longitude, baruch_latitude, zoom=17) |>\n  addPopups(baruch_longitude, baruch_latitude, \n            \"I am a Master's student at <b>Baruch College</b>!\")\n```\n````\n:::\n\n\n\n\n\n#### Resume Hosting\n\nIf you have a copy of your resume available as a PDF, TODO. \n\n#### TODO\n\n### `build_site.R`\n\nFinally, open a new file - but now it's an `R` script, not a text file, in RStudio. \nCopy the following into `build_site.R`: \n\n```\n#!/usr/bin/env Rscript\nif(!require(\"quarto\")){\n    install.packages(\"quarto\")\n}\nlibrary(quarto)\nif(!quarto::quarto_binary_sitrep()){\n    stop(\"Something is wrong with your quarto installation.\")\n}\nquarto::quarto_render(\".\")\nsystem(\"git add docs/*\")\nif(!any(grepl(\"rstudio\", search()))){q(\"no\")}\n```\n\nClick the `Source` button in the top-right corner of the editor pane to run this code. \nIf everything works, it will build your website and automatically stage it. Stage\n`build_site.R` as well. \n\nFinally, `Commit` all these staged files and `Push` them to GitHub. You have now\ncreated a website and just need to turn on a web server so you can access it. \n\n## Stage 4: GitHub Pages Deployment\n\nReturn to the GitHub repo you created; recall that the URL is something like:\n\n`https://github.com/<GITHUB_ID>/{{< var course.repo >}}/`\n\nOpen the \"Settings\" menu and proceed to the \"Pages\" submenu. You should see a \npage that looks like this: \n\n![](../images/pages_window.png)\n\nUnder `Build and Deployment`, set the `main` branch to deploy and\nselect the `docs` directory on that branch. Hit save and your website\nwill go live!\n\nTo check your website is working, proceed to \n\n`https://<GITHUB_ID>.github.io/{{< var course.repo >}}`\n\nIf everything works, you will see your site! (If you used the `Render`\nfeature in  RStudio, it should look familiar.) \n\nIf you get stuck, use the course discussion board to seek help from\nyour classmates and, if necessary, the instructor. \n\n## Stage 5: Submission\n\nOnce your site is live, you will submit it to the instructor in two ways: \n\n1) Log into the course discussion board (Piazza) and send me your GitHub\n   name so I can link it to my gradebook. \n2) Tag `@michaelweylandt` on GitHub to make sure I can access your repo. \n\nThese both must be completed to complete the assignment and verify enrollment.\n\n\n### Discussion Board (Piazza)\n\nFirst, send me a **private** message through the course discussion board with the \nfollowing details:\n\n- Real Name\n- CUNY EmplID (8 digit ID code)\n- CUNY email\n- GitHub user name\n\nThis is the only place where you are required to connect your GitHub ID \nwith your  real name and CUNY credentials. I need this information to connect\nyour public activity with my (private) gradebook and the CUNY system. \n\nIf all your information looks good, I might not reply through the\ndiscussion board. When I reply through GitHub, I'm acknowledging both parts\nof your submission. \n\n### Instructor Tagging\n\nFinally, you're going to contact me through `GitHub`: go to[^sub] \n\n`https://github.com/michaelweylandt/{{< var course.repo >}}/issues/new`\n\nto open a new issue. Title the issue `{{< var course.short >}} <GITHUB_ID> MiniProject #{{< meta mp_num >}}` and fill in the following text for the issue:\n\n::: {#submission-text}\n\n```\nHi @michaelweylandt!\n\nI've created my {{< var course.short >}} website - check it out!\n\nhttps://<GITHUB_ID>.github.io/{{< var course.repo >}}/\n```\n\n:::\n\n(Replace `<GITHUB_ID>` with your username throughout.)\n\n![](../images/github_issue.png)\n\nThis will send me a notification through GitHub and I will confirm that I can\naccess your repository and website. You should also use the [course helper \nscripts](../tips.html) to verify you have opened a GitHub issue properly. For\nthis project, simply run: \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"https://michael-weylandt.com/STA9750/load_helpers.R\")\nmp_submission_verify(0, \"<GITHUB_ID>\")\n```\n:::\n\n\n\n\n\nIf you don't do this, I may not be able toaccess your graded assignments when \nyou submit them! I will confirm that I have your real ID verified as well.\n\n[^sub]: Throughout this course, make sure to replace `<GITHUB_ID>` with your \nrecently created GitHub ID, making sure to remove the angle brackets. Note\nthat the automated course infrastructure will be looking for precise formatting,\nso follow these instructions closely. \n\n## Wrap-Up\n\nOnce I acknowledge receipt of your ID and website, you're done with \nMini-Project #{{< meta mp_num >}}!\nYou've built a website and are ready for the course to begin in earnest. \n\nMini-Projects #01-#04 will be submitted as separate pages in your website\n(different `quarto` documents) and hosted via GitHub pages for peer feedback.\nWe will discuss that process in more detail after Mini-Project \n#{{< meta mp_num >}} is complete.\n\n## Hints\n\nIf you need help, the course discussion board should be your first stop. \n\nIf you want to personalize your website further, you can see how I have created\nmine on [GitHub](https://github.com/michaelweylandt/michaelweylandt.github.io). \nRecall that the Markdown syntax used by `quarto` is summarized at\n[https://www.markdownguide.org/basic-syntax/](https://www.markdownguide.org/basic-syntax/).\n\nYou may want to use the [About\nPage](https://quarto.org/docs/websites/website-about.html)\nfunctionality to improve the look of your home page. This gives you the ability\nto link to your social media (personal and professional) or personal blog, to\ninclude a professional headshot, *etc.*\n\n------------------------------------------------------------------------\n\nThis work ©2025 by [Michael Weylandt](https://michael-weylandt.com) is licensed under a [Creative Commons BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en) license. ![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png){width=\"10%\"}\n\n\n[^1]: Early in the course, I will 'scaffold' most of the analysis, leaving only\nsome small steps for you to fill in. As the course progresses, the mini-projects\nwill be more self-directed. \n\n[^2]: Alternatively, simply go to [https://github.com/new](https://github.com/new) after\nlogging in.\n\n[^3]: You can leave the next two boxes blank or set a custom directory name and location. \nRStudio's defaults are reasonable; the default directory name will simply be\n`{{< var course.repo >}}` and it will be located in your home directory. \n\n[^4]: If you choose to complete the course using a pseudonym, make up something fun. \nIf you are using your real name, this is a great place to state that you are a Baruch student, \nyour expected graduation date, your field of employment (current or desired), and one or two\npersonal facts. This, along with a LinkedIn page, will quickly become one of the first\nthings that comes up when a potential employer searches your name, so make a good impression!\n\n",
    "supporting": [
      "mini00_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}