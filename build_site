#!/usr/bin/env Rscript
library(tidyverse)
library(glue)

## Auto-generate key dates file
system("soffice --convert-to csv key_dates.ods")

## Generate Google Calendar Formatted CSV for Student Events
DATES <- read_csv("key_dates.csv")

TUESDAY_DATES  <- DATES |> filter(Section %in% c("Tuesday", "Both"))
THURSDAY_DATES <- DATES |> filter(Section %in% c("Thursday", "Both"))

write_csv(TUESDAY_DATES,  "key_dates_tuesday.csv")
write_csv(THURSDAY_DATES, "key_dates_thursday.csv")

for(section in c("tuesday", "thursday")){
    SEC_DATES <- if(section == "tuesday") TUESDAY_DATES else THURSDAY_DATES
    ### i) First get lectures
    LECTURES <- SEC_DATES |>
        filter(`Course Element` == "Class Session") |>
        mutate(Subject=paste("STA/OPR 9750 Lecture", `Item Number`),
               `Start Date`=Date,
               `Start Time`="6:05 PM",
               `End Date`=Date,
               `End Time`="9:00 PM",
               `All Day Event`="False",
               `Location`="Zoom [Link distributed via CUNY Brightspace]") |>
        select(-`Course Element`,
               -`Item Number`,
               -`Action`,
               -`Responsible Party`,
               -`Date`,
               -`Time`,
               -`Details`,
               -`Section`)

    `%rep_na%` <- function(x, y) ifelse(is.na(x), y, x)

    ASSIGNMENTS <- SEC_DATES |>
        filter(`Responsible Party` == "Student") |>
        mutate(Subject = paste0("STA/OPR 9750 ",
                                str_replace(`Course Element`, "s$", ""),
                                " ",
                                `Item Number` %rep_na% "",
                                ": ",
                                Details),
               Subject = str_replace(Subject, " :", ":"),
               dt = paste(Date, Time),
               end = parse_date_time(dt, "%Y-%m-%d %H:%M%p"),
               start = end - minutes(30),
               `Start Date`=as_date(start),
               `End Date`=as_date(end),
               `Start Time`=format(start, "%I:%M %p"),
               `End Time`=format(end, "%I:%M %p"),
               `All Day Event`="False",
               `Location`=case_when(
                   `Course Element` == "Mini-Projects" ~ "Submitted via GitHub and Brightspace",
                   `Course Element` == "Pre-Assignments" ~ "Submitted via Brightspace",
                   str_detect(Details, "Team Roster Submission") ~ "Direct Submission to Instructor",
                   str_detect(Details, "Presentation") ~ "In-Class Presentation",
                   str_detect(Details, "Teammate Peer Evaluations") ~ "Submitted via Brightspace",
                   str_detect(Details, "Report") ~ "Submitted via GitHub and Brightspace"
               )) |>
        select(-`Course Element`,
               -`Item Number`,
               -`Action`,
               -`Responsible Party`,
               -`Date`,
               -`Time`,
               -`Details`,
               -dt,
               -start,
               -end,
               -Section
        )

    bind_rows(LECTURES, ASSIGNMENTS) |>
        arrange(`Start Date`) |>
        write_csv(glue("key_dates_students_gcal_{section}.csv"))

}

## Build site

if(!require("quarto")){
    install.packages("quarto")
}
library(quarto)
if(!quarto::quarto_binary_sitrep()){
    stop("Something is wrong with your quarto installation.")
}

QMD_FILES <- list.files(recursive=TRUE,
                        pattern="*qmd",
                        full.names=TRUE)

QMD_FILES <- QMD_FILES |>
    str_subset("(archive|_)", negate=TRUE) |>
    str_subset("(advice|_)", negate=TRUE)

for(fname in QMD_FILES){
    cat("Rendering", fname, "\n")
    quarto::quarto_render(fname)
}

# Process navbar in archive folders
cat("Adapting Archive Navbars\n")
ARCHIVE_HTML_FILES <- list.files("docs/archive/",
                                 recursive = TRUE,
                                 pattern="*html",
                                 full.names=TRUE)

library(rvest)
for(fname in ARCHIVE_HTML_FILES){
    html_old <- readLines(fname)
    html_links_old <- rvest::read_html(fname) |>
        html_element(".navbar") |>
        html_elements("a") |>
        html_attr("href")

    html_new <- html_old

    for(html_link_old in html_links_old){
        html_link_new <- str_replace_all(html_link_old,
                                         fixed("../../"),
                                         "./")
        html_new <- str_replace_all(html_new,
                                    html_link_old,
                                    html_link_new)
    }

    writeLines(html_new, fname)
}

cat("Adding archive announcement bars\n")

for(fname in ARCHIVE_HTML_FILES){
    html_old <- readLines(fname)
    if(str_detect(fname, "slides")){
        next
    }

    if(any(str_detect(html_old, "quarto-announcement"))){
        next
    }



    breakpoint <- which(str_detect(html_old, "</header>"))[1]

    html_before <- html_old[1:breakpoint]
    html_after <- html_old[(breakpoint+1):length(html_old)]

    current_link <- str_replace(fname, "docs/archive/+AY-\\d{4}-(SPRING|FALL)/?", "../../")
    current_link <- str_replace(current_link, "\\.\\./\\.\\./(.*)/(.*)", "../../../\\1/\\2")

    add_in <- glue('
<div id="quarto-announcement" data-announcement-id="6a42bbecdcf2d6ce6b61d47c55fab2f9" class="alert alert-danger">
  <i class="bi bi-info-circle quarto-announcement-icon"></i>
  <div class="quarto-announcement-content">
    <strong>Warning</strong> - This page is for a prior offering of STA 9750. For the latest offering, click <a id="exit-archive-link" href="{current_link}">here</a>.
  </div>
  <i class="bi bi-x-lg quarto-announcement-action"></i>
</div>
')

    html_new <- c(html_before, add_in, html_after)

    writeLines(html_new, glue('{fname}'))
}

knitr::purl("tips.qmd",
            documentation=0L,
            output="docs/load_helpers.R")

system("git add docs/*")


if(!any(grepl("rstudio", search()))){q("no")}
