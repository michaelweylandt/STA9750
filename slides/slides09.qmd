---
session: "`r session <- 9; session`"
class_date:
  "`r library(tidyverse); 
    read_csv('key_dates.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', Item.Number==session) |>
    pull(Date)`"
---

{{< include _setup.qmd >}}

# Agenda

## Today

- Administrative Business
- Brief Review: Flat Files and Plain Text Formats
- New Material: Accessing Data from Web Sources
- Wrap Up and Looking Ahead

## Orientation

- Communicating Results (`quarto`)  ‚úÖ
- `R` Basics  ‚úÖ
- Data Manipulation in `R`  ‚úÖ
- Data Visualization in `R`  ‚úÖ
- Getting Data into `R`
  - Flat Files and APIs ‚¨ÖÔ∏è
  - Web Scraping
  - Cleaning and Processing Text
- Statistical Modeling in `R`

## Special Welcome

Today we welcome Prof. Ann Brandwein to our course. 

![](https://zicklin.baruch.cuny.edu/wp-content/uploads/sites/10/2019/12/Ann-Cohen-Brandwein.jpg){height="25%" fig-align="center"}

. . . 

Advisor for MS Stat and MS QMM. If you don't already know Prof. B, you should!

# Administrative Business

## {{< var course.short >}} Mini-Projects

- Mini-Project #01 (`get_mp_deadline(1)`)
  - Submission ‚úÖ
  - Peer Feedback ‚úÖ
- Mini-Project #02 (`get_mp_deadline(2)`)
  - Submission ‚úÖ
  - Peer Feedback üîÑ
- Mini-Project #03 (`get_mp_deadline(3)`)
  - Submission ‚¨ÖÔ∏è
- Mini-Project #04 (`get_mp_deadline(4)`)

## Mini-Projects #01 and #02

Thank you for hard work on MP#01 and MP#02!

These are the 'bigger' projects

- Now we slow down to give you time to focus on [final projects](../project.html)

## Mini-Project #02

I'm glad to see y'all having fun with these

![](https://wowlime.github.io/STA9750-2025-SPRING/mp02award3.webp)

. . . 

> ‚ÄúPeople may be getting burned alive on our subways, but at least we‚Äôre stopping our riders from burning all that carbon,‚Äù said Don Vitiatus, CEO of the MTA, following Jay-Z‚Äôs heartfelt rendition of Empire State of Mind.

## Peer Feedback from MP#01

Peer feedback meta-grades from MP#01 released. Currently reviewing MP#02

. . . 

Some general comments: 

::: incremental

- No jerksüòÄ
- Feedback was generally on the money
- Try to be more specific in feedback
- Stick to template format (thank you!)

:::

## {{< var course.short >}} Mini-Project #03

Now [Online](https://michael-weylandt.com/STA9750/miniprojects/mini03.html)

**Due `r get_mp_deadline(3)`**

- GitHub post (used for peer feedback) AND Brightspace
- Three Weeks: don't wait until the very end

- Should be **much less** demanding than MP #01 and MP#02
  - Major aim: getting (clean) web data into `R`
  - Secondary aim: 'rectangling' JSON data
  
. . .

Pay attention to [the rubric](../miniprojects/mini03.html#rubric)

## Remaining Mini-Projects

- MP#04: `get_mp_title(4)`

![](https://static01.nyt.com/images/2024/11/06/multimedia/2024-11-06-press-red-shift-index/2024-11-06-press-red-shift-index-videoSixteenByNine3000-v2.jpg)

## {{< var course.short >}} Course Project

Proposal feedback a few weeks back - good offline follow up - come to OH to discuss

. . . 

**Next Week**: Mid-Term Check-In Presentations

- 6 minutes
- Locking in on _specific questions_
- Engagement with _existing literature_


## {{< var course.short >}} Course Project {.smaller}

Sharing private comments to one group: 

> [On spatial subdivisions] It's hard to say what level you should work at, but the general rule is small as possible. Students often think high resolution (lots of small regions) is harder, but it's actually much easier. You get more data (there are more ZCTAs than boroughs) and there is more homogeneity within each unit so it's easier to identify effects.
> 
> Big data is hard for computers but easy for analysis. Small data is what makes doing statistics hard. 

## {{< var course.short >}} Course Project {.smaller}

Sharing private comments to one group: 

> Data Quality: It is useful to distinguish two things here:
> 
> i) Is the data representative and useful? Is the survey designed to actually answer the question you want based on the relevant population? Is the sampling actually scientific and represenative or will it have its own biases. Meta question: Does this data _actually do_ what I need it to do?
> ii) Is the data _recorded_ well? Are there tons of missing data? Are there outliers you need to handle? Etc. Meta question: Does this data actually do what it claims to do?

## {{< var course.short >}} Course Project {.smaller}

Sharing private comments to one group: 

> As you read prior literature, you should be asking yourself "what are we adding?" If you find someone who has done _exactly_ what you have done, why are you wasting your time? The novelty of your work can be temporal (redoing an old analysis on new post-Covid data), spatial (recreating a Chicago study in NYC), data-source (using new data to confirm a prior finding) or methodological (using new statistical and visualization techniques to study an old problem), but fundamentally you need to be able to answer "Why would someone hire me to do this? Why is this worth my time to do it and my audience's time to hear about it?" (These are not the only options for novelty, just some axes students have used in the past.) 

## {{< var course.short >}} Course Project {.smaller}

Sharing private comments to one group: 

> The activities of this class are programming related - but the _point_ of the class is to give you the analytical tools to achieve your goals. These are mainly code things, but analytical tools also encompasses modes of thought and critical thinking. (That's why I try so hard to 'model' good analysis in the mini-projects.) You aren't required to make the step of moving beyond pure descriptive (correlation) analysis to causal claims, but if you go for it, I want you to do it in the very best way possible. 

## Pre-Assignments

Brightspace - Wednesdays at 11:45

- Reading, typically on course website
- Brightspace auto-grades

. . . 

**No Pre-Assignment for Next Week (Presentations)**

. . .

Thank you for FAQs and (honest) team feedback. Keep it coming!

## Course Support

- Synchronous
  - Office Hours 2x / week
    - MW Office Hours on **Tuesday** + **Thursday**
    - No OH during Spring break
- Asynchronous
  - Piazza ($19$ minute average response time)
  
## Upcoming Week

- Mid-Semester Project Check-Ins 

# Brief Review

## Flat / Plain Text Files

'Plain text' files:

::: incremental

- Simple _human readable_ and _human writeable_ file formats
- Not specific to one piece of software
- Examples: CSV, txt, TSV
- Anti-Examples: docx, pdf, jpg

:::

. . . 

Read into `R` with `readr` functions (*e.g.*, `read_csv`)

## Warm-Up: Reading Flat Files into `R`

From [FiveThirtyEight](https://fivethirtyeight.com/videos/the-ultimate-halloween-candy-power-ranking/)

{{< video https://www.youtube.com/watch?v=FjT35R8CC9Q width=1000 height=600 >}}

## Warm-Up

Data can be found at [`https://raw.githubusercontent.com/fivethirtyeight/data/refs/heads/master/candy-power-ranking/candy-data.csv`](https://raw.githubusercontent.com/fivethirtyeight/data/refs/heads/master/candy-power-ranking/candy-data.csv)

Read into `R` (`readr::read_csv`) and make 3 plots: 

- Do people like more sugary candy?
- Do people like more expensive candy?
- Open-Ended

## Breakout Rooms

| Room | Team           |  | Room | Team              |
|------|----------------|--|------|-------------------|
| 1    | Team Mystic + B|  | 5    | Money Team + CWo. |
| 2    | Subway Metrics |  | 6    | Lit Group         |
| 3    | Noise Busters  |  | 7    | Cinephiles + VG   |
| 4    | AI Imp. Coll.  |  |      |                   |

# New Material: Accessing Data from Web Sources

## Getting Data into `R`

Two topics: 

- How internet data transfer actually works
- How to handle non-rectangular data formats

## URLs

From `abstrax.io`

![](https://abstrax.io/wp-content/uploads/2022/07/parts-of-url-1024x335.png)

## JSON

`JSON`:

- Short for `JavaScript Object Notation`
- Popular plain-text representation for hierarchical data. 
- Closer to Python objects (`dict`s of `dict`s of `dict`s) than `R` `data.frame`s
- *Widely* used for Application Programming Interfaces (APIs)

## JSON

Example: 

```
{
    "data": {
        "id": 27992,
        "title": "A Sunday on La Grande Jatte ‚Äî 1884",
        "image_id": "1adf2696-8489-499b-cad2-821d7fde4b33"
    },
    "config": {
        "iiif_url": "https://www.artic.edu/iiif/2",
    }
}
```

## JSON

Read JSON in `R` with `jsonlite` package (alternatives exist)

```{r}
library(jsonlite)
# A JSON array of primitives
json <- '["Mario", "Peach", null, "Bowser"]'

# Simplifies into an atomic vector
fromJSON(json)
```

## JSON

```{r}
json <-
'[
  {"Name" : "Mario", "Age" : 32, "Occupation" : "Plumber"}, 
  {"Name" : "Peach", "Age" : 21, "Occupation" : "Princess"},
  {},
  {"Name" : "Bowser", "Occupation" : "Koopa"}
]'
mydf <- fromJSON(json)
mydf
```

## JSON - An API Standard

```{r}
#| cache: true
fromJSON("https://official-joke-api.appspot.com/random_joke")
```

Compare to [browser access](https://official-joke-api.appspot.com/random_joke)

## Data Transfer: `download.file`

```{r}
args(download.file)
```

Basic file download capabilities: 

- `url`: source
- `destfile`: where on your computer to store it
- `method`: what software to use in the background to download

## Data Transfer: HTTP

HTTP

- HyperText Transfer Protocol
- Most common (but not only) internet protocol
- Also `ftp`, `smtp`, `ssh`, ... 

"Low-level" mechanism of internet transfer

- Many `R` packages add a friendly UX
- `httr2` for low-level work (today)

## HTTP

<style>
.container{
    display: flex;
}
.col{
    flex: 1;
}
</style>


HTTP has two stages: 

::: {.container}

:::: {.col}

- Request
  - URL (Host + Path)
  - Method (VERB)
  - Headers
  - Content
  - Cookies
::::

:::: {.col}
- Response
  - Status Code
  - Headers
  - Content
  
::::

:::
  
Modern (easy) APIs put _most_ of the behavior in the URL

## HTTP in the Browser

In Firefox: Right-Click + `Inspect`

In Chrome: Right-Click + `Developer Tools`

. . . 

[Mozilla Developer Network (MDN) Docs for HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP)

## HTTP with `httr2`

`httr2` (pronounced "hitter-2") is *low-level* manipulation of
HTTP. 

```{r}
library(httr2)
request(example_url())
```

Pretty simple so far: 

- `example_url()` starts a tiny local web host
- `127.0.0.1` is `localhost`

## `httr2` Requests

Build a request: 

- `request`
- `req_method`
- `req_body_*`
- `req_cookies_set`
- `req_auth_basic` / `req_oauth`

## `httr2` Requests

Behaviors: 

- `req_cache`
- `req_timeout`

. . . 

Execution: 

- `req_perform`

## `httr2` Responses

Request status

- `resp_status` / `resp_status_desc`

Content: 

- `resp_header*`
- `resp_body_*`

## Live Demo

Demo: Using `httr2` to get a random joke from 

[https://official-joke-api.appspot.com/](https://official-joke-api.appspot.com/)

## Exercise - CRAN Logs API

See [Lab #09](../labs/lab09.html)
