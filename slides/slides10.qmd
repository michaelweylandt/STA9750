---
session: "`r session <- 10; session`"
class_date:
  "`r library(tidyverse); 
    tuesday_date <- read_csv('key_dates_tuesday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    thursday_date <- read_csv('key_dates_thursday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    paste(c(tuesday_date, thursday_date), collapse=' <br>')`"
---

{{< include _setup.qmd >}}

# Agenda

## Today

- Administrative Business
- Mid-Semester Check-In Presentations
- New Material: Functional Programming with `purrr`
- Looking Ahead

## Orientation

- Communicating Results (`quarto`)  ‚úÖ
- `R` Basics  ‚úÖ
- Data Manipulation in `R`  ‚úÖ
- Data Visualization in `R`  ‚úÖ
- Getting Data into `R`
  - Flat Files and APIs ‚úÖ
  - Web Scraping
  - Cleaning and Processing Text
- Statistical Modeling in `R`

## Orientation - Course Project

- Proposals ‚úÖ
- Mid-Semester Check-In ‚¨ÖÔ∏è
- Final Presentation
- Final Group Report
- Final Individual Report

# Administrative Business

## {{< var course.short >}} Mini-Projects

- Mini-Project #01 (`r get_mp_deadline(1)`)
- Mini-Project #02 (`r get_mp_deadline(2)`)
  - Submission ‚úÖ
  - Peer Feedback üîÑ
- Mini-Project #03 (`r get_mp_deadline(3)`)
  - Submission ‚¨ÖÔ∏è
  - Peer Feedback
- Mini-Project #04 (`r get_mp_deadline(4)`)
  - Submission
  - Peer Feedback

## {{< var course.short >}} Mini-Project #03

Now [online](https://michael-weylandt.com/STA9750/miniprojects/mini03.html)

**Due `r get_mp_deadline(03)`**

- GitHub post (used for peer feedback) AND Brightspace
- Three Weeks: don't wait until the very end

- Should be less demanding than MP #01 and MP#02
  - Major aim: getting (clean) web data into `R`
  - Secondary aim: 'rectangling' JSON data
  
. . .

Pay attention to [the rubric](../miniprojects/mini03.html#rubric)

## Remaining Mini-Projects

- MP#04: `r get_mp_title(4)`

![](https://static01.nyt.com/images/2024/11/06/multimedia/2024-11-06-press-red-shift-index/2024-11-06-press-red-shift-index-videoSixteenByNine3000-v2.jpg)



## Grading

Returned: 

- MP#02 Peer Meta-Review
  - My code had a time-zone error and I missed some of your comments
  - Addressing manually now - if not fixed in a day or so, please 
    contact to request fix

We *will* owe you: 

- Mid-Term Check-In Feedback

## Re-Grade Requests

Per course policy: 

- If you feel peer grades are wrong, please request an
  instructor re-grade
- New Brightspace 'quiz' to request (2 in queue)
  - Not an actual quiz...
  
. . . 

If you want to discuss your MPs in more detail, come to office hours!

## Pre-Assignments

Brightspace - Wednesdays at 11:45

- Reading, typically on course website
- Brightspace auto-grades
  - Completion scoring: ignore Brightspace 'raw scores'

Next pre-assignment is **`r get_pa_deadline(next_session)`**

. . .

Thank you for FAQs and (honest) team feedback. Keep it coming!


## Course Support

- Synchronous
  - Office Hours 2x / week
    - MW Office Hours on **Tuesdays** + **Thursday**
    - No OH during Spring Break
- Asynchronous
  - Piazza ($20$ minute average response time)

# Check-In Presentations

## Check-In Presentations

Today, I'm looking for: 

- 6 minutes
- Locking in on _specific questions_
- Engagement with _existing literature_

Mainly, I want to see that you will be able to _succeed_ 

## Presentation Order

| Order | Team            |  | Order | Team              |
|-------|-----------------|--|-------|-------------------|
| 1     | The Money Team  |  | 5     | C. Wo.            |
| 2     | Noise Busters   |  | 6     | Team Mystic       |
| 3     | AI Collective   |  | 7     | Subway Metrics    |
| 4     | The Lit Group   |  | 8     | V. G.             |
|       |                 |  | 9     | Cinephiles        |

# New Material: Functional Programming with `purrr`

## Functional Programming

Functional programming - *purity* 

- Minimizing _book-keeping_ and _side-effects_

. . . 

Can go _deep_ into FP world - we're just dipping a toe in

- List Access: `pluck`
- Idioms: `map`, `reduce`
- Adverbs: `safely`, `partial`, `insistently`   

## Functional Programming

![](https://imgs.xkcd.com/comics/purity.png)

## Functional Programming

Compare: 

```{r}
#| eval: false
#| echo: true
for(i in seq_along(letters)){
    lower_letter <- letters[i]
    upper_letter <- LETTERS[i]
    
    cat(upper_letter, " is the upper case of ", lower_letter, "\n")
}
```

and 

```{r}
#| eval: false
#| echo: true
walk2(LETTERS, letters, ~ cat(.x, " is the upper case of ", .y, "\n"))
```

## Functional Programming in `R`

In the `R` environment, FP is typically associated with `list`s

. . . 

Recall: a `list` is a _generic_ container in `R` (can hold anything, even other lists)

- Natural tool for parsing HTML (see last week)
- Many things in `R` are lists under the hood (including `data.frame`s)

## List Access with `pluck`

Given a `list`, the `pluck` function will pull out elements: 

- `list_obj |> pluck(n)` will pull out the $n^{\text{th}}$ element
- `list_obj |> pluck("name")` will pull out the element named `"name"`
- `list_obj |> pluck(func)` will apply the "accessor" `func`

## List Access with `pluck`

`lm`: Linear regression (and ANOVA)

```{r}
#| echo: true
library(palmerpenguins)
my_regression <- lm(body_mass_g ~ flipper_length_mm, data=penguins)

summary(my_regression)
```

## List Access with `pluck`

Can use `pluck` + accessors to get the coefficients

```{r}
#| echo: true
#| eval: false
my_regression |> pluck(1)
my_regression |> pluck("coefficients")
my_regression |> pluck(coef)
```

```{r}
#| echo: false
#| eval: true
my_regression |> pluck(coef)
```

Final form is most robust

## List Access with `pluck`

`pluck` has some nice useability features: 

::: incremental

- Can supply "compound" selections:
  `pluck(1) |> pluck("a")` is the same as `pluck(1, "a")`
- Can change default value from `NULL`: `pluck("a", .default=NA)` 
  - Use `chuck` if you want to error instead of default
  
:::

## Iteration - `map`

Often, we want to do the _same thing_ to several different items: 

- E.g., on MP#02, download EIA data _for each state_

. . . 

`map` and friends let us avoid loops

- Handles book-keeping for us
- List in and list out

## Iteration - `map`

```{r}
#| echo: true
#| eval: false
map(INPUT, FUNCTION)
```

applies `FUNCTION` to each element of `INPUT` and
collects the output in a new list

## Iteration - `map_chr`, `map_lgl`, *etc.*

Use `map_*` variants to return a vector instead of a list

- `R` will check that you are returning expected type

```{r}
#| echo: true
map(month.name, nchar)
```

## Iteration - `map_chr`, `map_lgl`, *etc.*

Use a custom function to hold on to side data

```{r}
#| echo: true
#| eval: false
map(month.name, 
    \(x) data.frame(month=x, nchar=nchar(x)))
```

```{r}
#| echo: false
#| eval: true
map(month.name, 
    \(x) data.frame(month=x, nchar=nchar(x))) |>
    head(1)
```


## `map` pipelines

Often we will want to `map` several times as we perform
steps of an analysis

```{r}
#| echo: true
penguins |> 
    group_by(species) |>
    group_split() |>
    map(\(d) lm(body_mass_g ~ flipper_length_mm, data=d)) |>
    map(summary) |>
    map_dbl("r.squared")
```
## Iteration - `map2`, `pmap`, `walk`

`map` variants let you iterate over lists in parallel: 

- `map2(x, y, f)` maps jointly over lists `x` and `y` 
  applying `f` to pairs of inputs
- `pmap` generalizes `map2` to arbitrary synchronized lists
- `walk` is map but discarding the output
  - *Demonstrates intent*, not new functionality *per se*
  
## Combining Results: `list_rbind`

To combine a list of `data.frame`s into a single `data.frame`, try `list_rbind`: 

```{r}
#| echo: true
#| eval: true
map(month.name, 
    \(x) data.frame(month=x, nchar=nchar(x))) |>
    list_rbind()
```

## Combining Results: `list_rbind`

From last week, 

```{r}
#| eval: false
#| echo: true
request("https://cranlogs.r-pkg.org") |>
    req_url_path_append("top") |>
    req_url_path_append("last-day") |>
    req_url_path_append(100) |>
    req_perform() |>
    resp_body_json() |>
    pluck("downloads") |>
    map(as_tibble) |>
    list_rbind()
```

## Combining Results: `reduce`

Given a list, we can 'combine' elements with the
`reduce` function:

```{r}
#| echo: true
map(month.name, 
    nchar) |>
    reduce(`+`)
```

```{r}
#| echo: true
map(month.name, 
    nchar) |>
    reduce(max)
```

## Adverbs: `safely`

If you have a function that sometimes throws errors, wrap
it in `safely`

```{r}
#| error: true
nchar_bad <- function(x){
    if(runif(1) < 0.2) stop("AN ERROR") else nchar(x)
}

map(month.abb, nchar_bad)
```

## Adverbs: `safely`

```{r}
#| error: true
nchar_safe <- safely(nchar_bad, otherwise=NA)

map(month.abb, nchar_safe) |> 
    map(pluck("result")) |> # Result of safely() is list, so
    list_c()                # We must map() our pluck()
```

## Adverb: `possibly`

The `safely |> map(pluck("result"))` combo is common, so helper `possibly`:

```{r}
#| error: true
nchar_safe <- possibly(nchar_bad, otherwise=NA)

map_int(month.abb, nchar_safe) 
```

## Adverbs: `insistently`

For functions that fail sporadically (*e.g.*, web access), try `insistently`: 

```{r}
#| eval: false
#| echo: true
read_html_insist <- insistently(read_html)

read_html_insist("https://a.sketchy.site")
```

Will try 3 times by default

## Adverbs: `slowly`

Some websites will get mad if you query too often: `slowly` will make sure it isn't called too often

```{r}
#| eval: false
#| echo: true
read_html_slow <- slowly(read_html)

read_html_slow("https://a.rate-limited.site")
```

Default is once per second.

## Functional Tools

Not everything fits within `purrr` tooling 

. . . 

But a lot does!

Use it when helpful: 

- Applying the same analysis many times `map`
- Recursively combining ($n$-way inner join)
- Error handling
- List-structured data (HTML -> more next week!)

# Looking Ahead

## Upcoming Mini-Projects

- MP#04: `r get_mp_title(4)`

Seeking suggestions for next semester

## Upcoming

Spring Break!!

. . . 

Next Week (After Spring Break): 

- Mini-Project #03
- Pre-Assignment

. . . 

Week After: 

- MP#03 Peer Feedback
- Pre Assignment

{{< include ../advice/taxes_due.qmd >}}
