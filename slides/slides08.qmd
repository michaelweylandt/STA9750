---
session: "`r session <- 8; session`"
class_date:
  "`r library(tidyverse); 
    tuesday_date <- read_csv('key_dates_tuesday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    thursday_date <- read_csv('key_dates_thursday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    paste(c(tuesday_date, thursday_date), collapse=' <br>')`"
---


{{< include _setup.qmd >}}


```{r}
#| include: false
#| warning: false
#| message: false
library(tidyverse)
DATES   <- read_csv("key_dates.csv")
TODAY   <- DATES |> 
    filter(`Course Element` == "Class Session", 
           `Item Number` == session)

TODAY_TUESDAY  <- TODAY |> 
    filter(Section == "Tuesday")  |> 
    pull(Date)
TODAY_THURSDAY <- TODAY |> 
    filter(Section == "Thursday") |> 
    pull(Date)

TODAY_TOPIC <- TODAY |>
    filter(str_detect(Details, "Lecture")) |>
    pull(Details)

```
    
## {{< var course.short >}} Week {{< meta session >}} 

::: {.smaller}

Today: 

- Tuesday Section: `r TODAY_TUESDAY`
- Thursday Section: `r TODAY_THURSDAY`

`r TODAY_TOPIC`

:::

. . . 

::: {.smaller}

- Communicating Results (`quarto`)  ✅
- `R` Basics  ✅
- Data Manipulation in `R`  ✅
- Data Visualization in `R`  ⬅️
  - Static Plots  ✅
  - Interactivity, Maps, Animated Plots  ⬅️
- Getting Data into `R`
- Statistical Modeling in `R`

:::

# Today

## Today

- Course Administration
- Warm-Up Exercises
- Advanced `ggplot2`
- PA#08 FAQs
- Wrap-Up
  - Life Tip of the Day
  
# Course Administration

## GTA 
  
Charles Ramirez is our GTA

- Wednesday Office Hours at 6pm
- Working on Meta-Review

## Mini-Project #02

[MP#02](../miniprojects/mini02.html) - `r get_mp_title(2)`

::: {.small}

**Due `r get_mp_deadline(2)`**

-   GitHub post (used for peer feedback) AND Brightspace
-   Start early to avoid Git issues

:::

. . .

::: {.smaller}

Pay attention to [the rubric](../miniprojects/mini02.html#rubric)

-   Writing and presentation are about 50% of your grade
-   Evaluated on *rigor* and *thoughtfulness*
-   Use what you learned from MP#01

:::

. . . 

::: {.small}

Rubric updated to clarify opportunities for and limits to extra credit

:::

## Mini-Project #03

[MP#03](../miniprojects/mini03.html) now posted. **Due `r get_mp_deadline(3)`**

`r get_mp_title(3)`

. . . 

Topics covered: 

::: {.incremental}

- Data Import
  - One static file
  - One API call
- Spatial Data
  - Very basic spatial joins
  - Spatial visualizations (maps!)
  
:::

Comapre to [NYC Tree Map](https://tree-map.nycgovparks.org/tree-map/)


## Grading in Progress

I owe you: 

- Project Proposal Feedback
- MP#01 Meta-Review Grades
- (Selected) MP#01 Regrades 


## Pre-Assignments

Brightspace:

-   Reading, typically on course website
-   Brightspace auto-grades for completion

Next PA is due **`r get_pa_deadline(next_session)`**: 

- Quick: what are files? How do we read them into `R`?

## Course Support

-   Synchronous
    -   MW Office Hours 2x / week: **Tuesdays + Thursdays 5pm**
        - Rest of Semester except Thanksgiving (Nov 27th)
    - GTA Office Hours: **Wednesdays at 6pm**
-   Asynchronous: Piazza ($<20$ minute *average* response time)


## Continual Improvement

I maintain a
[TODO file](https://github.com/michaelweylandt/STA9750/blob/main/TODO.md) 
with ideas of things I want to improve for next cohort. 

Suggestions welcome. 

. . . 

Every semester, I create new mini-projects. Ideas and suggestions very
welcome

- Topics and data sets are both great

## Future Mini-Projects

- MP#04: 
  - Deadline: `r get_mp_deadline(4)`
  - Topic: BLS Monthly Employment Reports

## Course Project

[Course Project](../project.html) should be your *main focus* 
for rest of course

- But you still need to do mini-projects and pre-assignments(!)

# Proud of You! 

## Proud of You

A personal note, if you allow me: 

. . . 

> I'm teaching an alternate version of STA 9750 this semester (different degree
> program, different curricular goals). The quality of your analyses and 
> presentation(even on MP#01) is night and day. I hope you are proud of the work
> you are doing - I know I am. 

. . . 

::: {.small}

> Your effort is not unnoticed - I know this class starts
> "pedal-to-the-metal" but hopefully you've seen just 
> how powerful these tools `R`. 

:::

. . . 

::: {.small}

> More than that - I appreciate your good attitude and willingness to
> share your frustrations and triumphs. Reading comments, even if I don't respond, is uplifting. 

:::

# Review Exercise

## SSA Registered Births

Time series data of babies born and registered with the 
Social Security Administration (previously in Lab #05)

. . . 

```{r}
#| echo: false

if(!file.exists("births.csv")){
    download.file("https://raw.githubusercontent.com/michaelweylandt/STA9750/main/births.csv", 
                  destfile="births.csv")
}
library(readr)
library(dplyr)

births <- read_csv("births.csv")
glimpse(births)
```

## SSA Registered Births

Practice visualization: 

1. Are there months with more births?
2. Are there days of the week with more births? 
3. Is there a long-term trend in births?

See [Lab #08](../labs/lab08.html#review) for details.

## Breakout Rooms {.scrollable}

```{r}
#| echo: false
set.seed(9750+session)
library(DT)
library(yaml)
library(jsonlite)

TEAMS <- read_yaml("_teaching.yml") |> 
  pluck("gradedir") |> 
  file.path("teams.json") |> 
  read_json(simplify=TRUE) |> 
  pull(name) |>
  sample()

TUESDAY_TEAMS  <- TEAMS[str_detect(TEAMS, "(T)")]
THURSDAY_TEAMS <- TEAMS[str_detect(TEAMS, "(R)")]

pad_with_NA <- function(x, length.out){

    if(length(x) < length.out){
      x <- c(x, rep(NA, length.out - length(x)))
    }

    x

}

N_ROOMS <- max(length(TUESDAY_TEAMS), length(THURSDAY_TEAMS))

TUESDAY_TEAMS  <- pad_with_NA(TUESDAY_TEAMS, N_ROOMS)
THURSDAY_TEAMS <- pad_with_NA(THURSDAY_TEAMS, N_ROOMS)

data.frame(t1 = TUESDAY_TEAMS, t2 = THURSDAY_TEAMS) |> 
  mutate(Teams = case_when(
  is.na(t1) ~ t2, 
  is.na(t2) ~ t1, 
  TRUE ~ paste(t1, t2, sep=" + ")), 
         Breakout = row_number()) |> 
  select(Breakout, Teams) |> 
  datatable(options(pageLength=25, searching = FALSE))
```

# Advanced `ggplot2`

## Spatial Data

Maps are more interesting than you think!

- The world isn't flat!

. . . 

This can get *intense*, but we will get by with simple features (`sf`)

[Spatial Data in Lab #08](https://michael-weylandt.com/STA9750/labs/lab08.html#maps)

## WGS 84

[WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS_84) is a 
robust and widely-used way of creating maps from 3D coordinates

. . . 

Not universal!

{{< video https://www.youtube.com/watch?v=L9Di-UVC-_4 width="40%" height="200px" >}}

## Interactive Tooling

## Animated Graphics

`gganimate` is the *de facto* standard for animated `ggplot2`: 

- Make a bunch of `png` files
- Combine into a `gif`

. . . 

Most commonly: `+transition_time(VARIABLE)`

See [Getting Started](https://gganimate.com/reference/transition_filter.html) 
for more

## Animated Graphics

When it works, `gganimate` is great

- PITA when external software is busted

. . . 

Alternatives: 

- Facet plots
- Split facets over pages and scroll quickly: `ggforce::facet_wrap_paginate`
- Interactivity with autoplay

# PA#08 FAQs


## ggplot2 & Pie Charts

Why do Pie Charts have a bad reputation?

- Use of _area_ and _angle_ over _length_: less accurate perception
- Depends on `fill` to convey category - limited categories

. . . 

But honestly - "insider smugness"  and hate of `Excel`


## ggplot2 Plot Type Choice

For me: 

- Exploratory mode: 
  - Simple: line, scatter, bar, frequency
- Publication mode:
  - Very context specific

## `ggplot2` Font Sizing

Theme machinery!

```{r}
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + 
    geom_point() + theme(axis.text = element_text(size=24))
```

## Overplotting / ScatterBlobs

Student asked about "scatterblobs" - typo(?) but I love it!

. . . 

- Density based plotting: hexbins, histograms, rugplots
- Data reduction: summarization or sub-sampling

## Optimizing `ggplot2` Performance

Active project of `ggplot2` team - not much you can do

*Practical advice*: plot less (see previous slide)

## `ggplot2` Beyond Scatter and Line

Some favorite semi-advanced plot types: 

- Violin plots: combination of boxplot and histogram
- Ridgelines
- Beeswarms

_Deep_ rabbit hole

## `ggplot2` + High-Dimensional Data

High-dimensional data: measure many variables per observation ("wide")

High-dimensional data is _hard_ to visualize

. . . 

Approaches: 

- Pair plots for "moderate" HDD
- PCA (or similar dimension reduction. Take 9890!)


## Custom `ggplot2` Theme

```{r}
my_theme <- theme_bw() + theme(panel.background = element_rect(fill = 'lightblue'))
ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width)) + geom_point() + my_theme
```

Advanced: 

- `theme_set()` - change `ggplot2` defaults
- `.Rprofile` - set code to run every time you start `R`

## `ggplot2` - When Not to Use 

`ggplot2` is designed to make good statistical graphics. Sub-par for: 

- Advanced interactivity
- _Really_ big data
- Hardcore customization / "infographics"

## `git` WTF

Reference: [Happy Git with R](https://happygitwithr.com/)

# Wrap-Up

## Review

Advanced `ggplot2`: 

- `ggplot2` as a platform for powerful extensions
- Spatial data: `sf`
- Interactivity: `ggplotly`, `shiny`
- Animation: `gganimate`

## Upcoming Work

Upcoming work from [course calendar](../index.qmd#calendar)

::: {.incremental}

- [Pre-Assignment #0`r session+1`](../preassigns/pa07.html) due `r get_pa_deadline(session+1)`
- [Mini-Project #02](../miniprojects/mini02.html) due on `r get_mp_deadline(2)`

:::

. . . 

Topics for the next three weeks:

- Reading 'clean data' into `R`
- Reading and parsing HTML
- Parsing messy (text) data

{{< include ../advice/sorting_dates.qmd >}}

## Musical Treat

</br>

{{< video https://www.youtube.com/watch?v=vb-_qqmOcCI width="80%" height="400px">}}


# Today

## Warm-Up

"Datasaurus Dozen": 

- `install.packages("datasauRus")` (Note capital `R`)
- `library(datasauRus); data(datasaurus_dozen)`

Create an _animated_ (`gganimate`) plot: 

- $x, y$ scatterplot
- Animate different values of `dataset`

If you are having trouble with `gganimate`, facet instead. 

## Warm-Up

![](https://blog.revolutionanalytics.com/downloads/DataSaurus%20Dozen.gif)

## Diving Deeper into `ggplot2`

First topic: maps!

Install the [`sf` package](https://r-spatial.github.io/sf/): 
**S**imple **F**eatures for Spatial Data 

Exercise: [Lab #08](../labs/lab08.html)

## Breakout Rooms

| Room | Team           |  | Room | Team              |
|------|----------------|--|------|-------------------|
| 1    | Team Mystic    |  | 5    | Money Team + CWo. |
| 2    | Subway Metrics |  | 6    | Lit Group         |
| 3    | Noise Busters  |  | 7    | Cinephiles + VG   |
| 4    | AI Imp. Coll.  |  |      |                   |

## Topic Interactive Tools for Data Analysis 


# Looking Ahead

## Looking Ahead {.smaller}

Due Wednesday at 11:45pm:

- Pre-Assignment #0`r next_session` (Brightspace)
  - Data Import
- MP #02 Peer Feedback on GitHub AND Brightspace

. . . 

Next three weeks: 

- Reading 'clean data' into `R`
- Reading and parsing HTML
- Parsing messy (text) data

. . . 

Teaching Observation by Prof. Brandwein - Next Week

{{< include ../advice/galleries.qmd >}}



# Just FYI: </br> Old Pre-Assignment #08 FAQs

## FAQ: `ggplot2` - `aes()`

What is the `aes` function - stands between data and `geom_`

- Each `geom_` takes a fixed set of "coordinates"
- Each data set has its own column names
- `aes` ties these together

```{r}
library(ggplot2); library(patchwork)
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
p2 <- ggplot(iris, aes(y=Sepal.Length, x=Sepal.Width)) + geom_point()
p1 + p2
```

## FAQ: `ggplot2` - Why do Pie Charts have a bad reputation?

- Use of _area_ and _angle_ over _length_: less accurate perception
- Depends on `fill` to convey category - limited categories

. . . 

But honestly - "insider smugness"  and hate of `Excel`


## FAQ: `ggplot2` - Plot Type Choice

For me: 

- Exploratory mode: 
  - Simple: line, scatter, bar, frequency
- Publication mode:
  - Very context specific

## FAQ: `ggplot2` - Font Sizing

Theme machinery!

```{r}
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + 
    geom_point() + theme(axis.text = element_text(size=24))
```

## FAQ: `ggplot2` - Overplotting / ScatterBlobs

Student asked about "scatterblobs" - typo(?) but I love it!

. . . 

- Density based plotting: hexbins, histograms, rugplots
- Data reduction: summarization or sub-sampling


## FAQ: `ggplot2` - Optimizing Performance

Active project of `ggplot2` team - not much you can do

*Practical advice*: plot less (see previous slide)

## FAQ: `ggplot2` - Beyond Scatter and Line

Some favorite semi-advanced plot types: 

- Violin plots: combination of boxplot and histogram
- Ridgelines
- Beeswarms

_Deep_ rabbit hole

## FAQ: `ggplot2` - Geospatial Visualizations

That's our goal for today!

## FAQ: `ggplot2` - High-Dimensional Data

High-dimensional data: measure many variables per observation ("wide")

High-dimensional data is _hard_ to visualize

. . . 

Approaches: 

- Pair plots for "moderate" HDD
- PCA (or similar dimension reduction. Take 9890!)


## FAQ: `ggplot2` - Creating a Custom Theme

```{r}
my_theme <- theme_bw() + theme(panel.background = element_rect(fill = 'lightblue'))
ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width)) + geom_point() + my_theme
```

Advanced: 

- `theme_set()` - change `ggplot2` defaults
- `.Rprofile` - set code to run every time you start `R`

## FAQ: `ggplot2` - When Not to Use 

`ggplot2` is designed to make good statistical graphics. Sub-par for: 

- Advanced interactivity
- _Really_ big data
- Hardcore customization / "infographics"

## FAQ: `git` WTF

Reference: [Happy Git with R](https://happygitwithr.com/)
