---
session: "`r session <- 2; session`"
class_date:
  "`r library(tidyverse); 
    tuesday_date <- read_csv('key_dates_tuesday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    thursday_date <- read_csv('key_dates_thursday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    paste(c(tuesday_date, thursday_date), collapse=' <br>')`"
---

```{r}
#| include: false
#| warning: false
#| message: false
library(tidyverse)
DATES   <- read_csv("key_dates.csv")
TODAY   <- DATES |> 
    filter(`Course Element` == "Class Session", 
           `Item Number` == session)

TODAY_TUESDAY  <- TODAY |> 
    filter(Section == "Tuesday")  |> 
    pull(Date)
TODAY_THURSDAY <- TODAY |> 
    filter(Section == "Thursday") |> 
    pull(Date)

TODAY_TOPIC <- TODAY |>
    filter(str_detect(Details, "Lecture")) |>
    pull(Details)

PROJ_RELEASE <- DATES |> 
    filter(str_detect(Details, "Project Description")) |>
    pull(Date)

ROSTERS <- DATES |> 
    filter(Details == "Team Roster Submission") |>
    pull(Date)
```
    
## {{< var course.short >}} Week {{< meta session >}} 

Today: 

- Tuesday Section: `r TODAY_TUESDAY`
- Thursday Section: `r TODAY_THURSDAY`

`r TODAY_TOPIC`


## Course Enrollment

```{r}
#| include: false
TOTAL_STUDENTS <- 98
PIAZZA_ENROLLED <- 63
NOW <- Sys.time()
```

Final enrollment: `r TOTAL_STUDENTS`(!)

- $\approx 20$ final project teams (4-6 each)
- Approx 4 MPs to review per peer-feedback cycle

. . . 

Lots of students: *please* follow instructions *closely* so
I can automate course management.

- Less time spent 'shuffling paper' gives more time 
  for feedback and student support
  
## Course Project Draft

Course project *draft* description is now
[online](https://michael-weylandt.com/STA9750/project.html) 

Detailed discussion of:

- Project structure
- Key deadlines
- Grading rubrics

Will be finalized next week - `r PROJ_RELEASE`. 

Please send me questions in advance!

First step: by `r ROSTERS`, email me your group members.

## Teaching Assistant (GTA)

GTA - Charles Ramirez

. . . 

Responsibilities TBD. Likely: 

- Managing grading
- Weekly office hours

. . . 

Won't start for a few weeks - CUNY is *slow*

## Piazza 

- `r PIAZZA_ENROLLED` sign-ups: `r TOTAL_STUDENTS - PIAZZA_ENROLLED` still need to sign up
- Thank you for those of you who already posted questions!
- Post #05 - Search for Teammates

> *Instructor Tip: Before committing a team with someone, you can
  look up their GitHub and see how they did on MP#00 and MP#01.
  This might be helpful to find teammates whose standards are
  calibrated to your own.*

## Pre-Assignments

`r session |> sprintf("Pre-Assignment #%02d", x= _)`

::: {.small}

  - Ignore Brightspace's Grading
    - Brightspace calls all short answers wrong
    - Gradebook shows complete/incomplete grading
  - I often give feedback through Brightspace, so 
    check 'feedback' if you are alerted to any
    
:::

. . .
  
`r (session + 1) |> sprintf("Pre-Assignment #%02d", x= _)`

::: {.small}

  - Day before class at midnight each week
  - Available on course website + Brightspace after 9pm
  
:::

## Mini-Project #00

```{r}
#| include: false
MP0_DATE <- DATES |> 
    filter(`Course Element` == "Mini-Projects", 
           `Item Number`==0, 
            str_detect(Details, "Project Due")) |>
    pull(Date)
```

[Mini-Project #00](../miniprojects/mini00.html)

- Due in (slightly less than) a week
  - `r MP0_DATE |> strftime("%A, %B %d")`
- Possible tech issues, so start early
- 10 GitHub tag + Piazza Messages so far

[*Verification of Enrollment*](https://enrollmentmanagement.baruch.cuny.edu/registrar/verification-of-enrollment/) - Required to stay enrolled in class

## Optional DataCamp

New _optional_ DataCamp course: 

- Reporting with R Markdown

. . . 

R Markdown is proto-Quarto: 

- [Similar, but not identical](https://quarto.org/docs/faq/rmarkdown.html#quarto-sounds-similar-to-r-markdown.-what-is-the-difference-and-why-create-a-new-project)

## Today

- Introduction to Markdown and Quarto
- Review of Questions from Pre-Assign #02
- Introduction to Git and GitHub pages
- How to ask for help


# Introduction Markdown and Quarto

## Markdown

Markdown: 

::: {.incremental}

- Initially developed to replace complex _mark-up_ languages (HTML, XML)
- Simple syntax: 
  - Can be read as _plain text_
  - Easy to translate to HTML
- Now ubiquitous (even in ChatGPT!)
- Can be used for more than just web pages
- Standardized as [CommonMark](https://commonmark.org/)
  
:::

## Markdown 

Source code:

```{md}
This is what Markdown looks like!

I can write in *italics* or **bold**. 

Lists are easy: 

1. First
1. Second
1. Third

as are links to [helpful info](https://commonmark.org).
```


## Markdown 

Output: 

> This is what Markdown looks like!
> 
> I can write in *italics* or **bold**. 
> 
> Lists are easy: 
>
> 1. First
> 1. Second
> 1. Third
>
> as are links to [helpful info](https://commonmark.org).


## Rendering Markdown

Markdown is just a _language_:

::: {.incremental}

- Software needed to _render_ from plain text to output formats
- Most popular (behind the scenes) is [Pandoc](https://pandoc.org/)

:::

. . . 

![](../images/md_pipeline.png)


## Rendering Markdown {.scrollable}

Pandoc can essentially convert _anything_ to _anything_: 

. . . 

![](https://pandoc.org/diagram.svgz?v=20250517125450)


## Markdown - WYSIWYM

Markdown is a WYSIWYM format: 

::: {.incremental}

- **W**hat **Y**ou **S**ee **i**s **W**hat **Y** **M**ean
- Not WYSIWYG: **W**hat **Y**ou **S**ee **i**s **W**hat **Y** **G**et

::: 

. . .

Extensions allow finer control of formatting

- Provide _templates_ to `pandoc` for finer control (not in this class)

## Markdown and Quarto

- Quarto _implements_ Markdown with data-analytic extensions
- Seamless (ideally!) integration of code and text
- No more copy and paste 

. . . 

![](../images/qmd_pipeline.png)

## Markdown and Quarto

In this class, *web sites*: 

- Each `qmd` document becomes a single `html` file (page)
- All files in directory collectively make a web site
  - GitHub project $\implies$ your website in [MP#00](../miniprojects/mini00.qmd)

. . . 

Resources: 

- [Quarto user guide](https://quarto.org/docs/guide) is fantastic!
- [Source for course materials](https://github.com/michaelweylandt/STA9750) for examples

## RStudio - A Useful IDE

Official Cheat Sheets: 

- [RStudio Cheat Sheet](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html)
- [Quarto Cheat Sheet](https://rstudio.github.io/cheatsheets/html/quarto.html)

[Data Camp RStudio Tutorial (Free)](https://www.datacamp.com/tutorial/r-studio-tutorial)

- For today, first ~half 

. . . 

RStudio has native Quarto support: just hit "Render"


# FAQs from PA#02

## Q1

> What is Markdown? 

Per Wikipedia: "Markdown is a light-weight, plain-text, 
markup language specification"

:::: {.incremental}
- Light-weight: relatively simple, focus on content than formatting
- Plain-text: accessible using almost any text editor (RStudio, GitHub, VS Code, *etc*)
  - Not locked into specific software (*e.g.*, MS Word)
  - Easily incorporated into a variety of technologies
::::


## Q1

> What is Markdown? 

:::: {.incremental}
- Markup language: a 'mini-coding language' for text documents
  - Other famous examples: HTML, XML
- Specification:
  - [CommonMark](https://commonmark.org/) defines 'standard' Markdown
  - Some software allows _extensions_
  - [Pandoc](https://pandoc.org/) often powers under the hood
::::

## Q2

> Other than text formatting, does Markdown have 
  any other uses?

On its own, Markdown is just text formatting (but that's a lot!)

. . .

We will use _Quarto_ which augments markdown for 
_reproducible research_. 

We can embed code-*and its output*-inside Markdown documents.

## Q3 

> What uses Markdown? 

So much! Used by Bitbucket, GitHub, OpenStreetMap,
Reddit, Stack Exchange, Drupal, ChatGPT, Discord, MS Teams 
and many more!

. . .

Tools like Pandoc/Quarto _render_ Markdown to:

:::: {.columns}

::: {.column width="50%"}
- HTML
- PDF
- Web Slides
- EBooks

:::

::: {.column width="50%"}
- Research Papers
- Word Documents
- PowerPoint slides
- and so much more!
:::

:::: 

## Q4 

> What is the difference between a Code section and a Nested List? Are they just different ways of indenting?

No. Nested lists are 'just' text

Code formatting enables much more if rendering engine supports it:

. . .


```{.r code-line-numbers="6-7"}
library(tidyverse)
ggplot(txhousing, 
       aes(x=ym(year, month, 1), 
           y=sales, 
           color=city)) + 
    geom_point() + 
    geom_smooth() + 
    xlab("Date") + 
    ylab("Number of Sales")
```

## Q5

> How are we going to use Markdown?

All written work (mini-projects and final project) 
in this course will be submitted using Markdown (by way of
[Quarto](https://quarto.org)). 

. . .

::: {.small}

Specifically:

- Submission pages for 5 mini-projects
- Individual reports for course project
- Summary (team) report for final project

You are also encouraged (but not required) to use Markdown for
presentation slides (like these!)

:::

## Q6

> How can I create Tables in Markdown? 

Markdown has two table syntaxes:

- an easy one with minimal control
- a hard one which allows fine grained control (alignment, 
  column widths, etc.) - "pipe tables"
  
If you are making complex tables, I recommend using the 
[list-table](https://github.com/pandoc-ext/list-table) extension. 

(See [`syllabus.qmd`]({{< var course.repo-url >}}/blob/main/syllabus.qmd) in course repo for examples.) 

## Q7

> How to create images and links? 

Basic hyperlinks look like this: 

```
[link text](https://the.url/goes/here)
```

. . .

If you want to _embed_ the contents of a link, prepend it with an exclamation point. This is most useful for _images_:

```
![Image Caption](https://the.url/goes/here.png)
```

. . .


You can even put a link inside an image to be fancy: 

```
[![Elephant](elephant.png)](https://en.wikipedia.org/wiki/Elephant)
```

## Q7

> How to create images and links? 

Quarto automatically embeds the results of plotting code: 

```{r}
#| label: plot-example
#| fig-align: "center"
#| output-location: slide
plot(1:5, main="Behold, a Plot!", 
     col=2:6, cex=5, 
     pch=16, xlab="", ylab="", 
     cex.main=4)
```



Here, Quarto handles all the file creation and link targeting for
us. If I change the code, the figure will change automatically.

# Git and GitHub Pages

## Git

`git` is _the_ industry-standard tool for _source code management_ (SCM)

::: {.incremental}

- SCM *aka* Version Control Systems (VCS) are used to manage code through
  the development process
- Saves _versions_ of your code and lets you access them whenever
- Not automatic like *Dropbox*: you save a version when you intend 
- Powerful tools for parallel versions or multiple authors - we won't be using these
:::

## Git

Courtesy of [PhD Comics](https://phdcomics.com/comics.php?f=1531), 
this is what we want to avoid: 

![](https://phdcomics.com/comics/archive/phd101212s.gif){fig-align="center" height=500}


## Git

Git tracks _changes_ to files

- A _commit_ is both a set of changes & the result of all changes to that
  point
- A branch name (like `main`) is just a stand-in for "latest commit"

## The Cycle of Git

For this course, I like the mental model of a box: 

- `git add`: Commands to put changes in the box
- `git commit`: Seal the box and put shipping info on the outside
- `git push`: Send the box (to GitHub)

## The Cycle of Git

From GitHub user `@design-web-victo`:

![](https://design-web-victo.github.io/assets/images/git_basics_01.png)

## RStudio Git Integration

Once you create a _project_, RStudio has built-in `git` integration

:::: {.columns}

::: {.column width="50%"}

- Do the same commands with buttons instead of code

![](../images/git_pane_basic.png){fig-align="center" height="90%"}

:::

::: {.column width="50%"}

- Uncheck Blue `M` are files that have been **M**odified 
  since the last commit
- Yellow `?` are files I have never told `git` to track

:::

::::

## RStudio Git Integration

Check box next to a file name to _stage_ (or _add_) it in `git`

- Load it in the box
- Getting ready to save it

![](../images/git_pane_added.png){fig-align="center" height=500}

## RStudio Git Integration

Create a _commit_ with the `Commit` button

- You have to type a message and hit `Commit` a second time

![](../images/git_commit_wizard.png){fig-align="center" height=500}

## Git to GitHub

`git push` (green up arrow button) to move files to GitHub

. . . 

Resulting commit now [visible on GitHub](https://github.com/michaelweylandt/STA9750/commit/e459c058ed67dc619dfc05553083b04ea572543e#diff-4e73a4a2ba5f87b54c29bb05c8e7483ce648f919836afc3191ebeeb59bf9211e)

. . . 

Automatically updates website as well

. . . 

File no longer listed in `Git` pane - no new changes

- If I make more changes, file will reappear as `M`

## GitHub

For us, `GitHub` is just a "dumping ground" 

- Only send data to `GitHub` from a single computer
- Much more complex workflow if moving changes up and down

. . . 

**Warning**: Do not make any edits using the GitHub website. This will
cause tons of pain. All changes should be made from one computer and 
pushed upwards only.

## GitHub Pages

GitHub provides [GitHub Pages](https://docs.github.com/en/pages)

::: {.incremental .small}

- Free hosting for _static_ web pages
- Static means no login or server-side interactivity
  - Limited client-side activity via JavaScript
  
:::

. . . 

We will use GitHub pages for all work submission in this class

::: {.incremental .small}

- Public visibility (portfolio)
- Uploading `qmd` files allows automatic checks
- Peer evaluation and discussion
- Follow instructions _carefully_ & I can automate

:::

## GitHub Instructions

::: {.small}

By default, URLs like: 

> `https://<GITHUB_ID>.github.io/<GITHUB_REPONAME>`

. . . 

If you create a repo called `<GITHUB_ID>.github.io`, URL simplifies: 

> `https://<GITHUB_ID>.github.io/`

. . . 

If you own a domain, you can map to arbitrary base URL: 

> `https://<DOMAIN_NAME>/<GITHUB_REPONAME>`

*E.g.*, `https://michael-weylandt.com/STA9750`

:::

## Brackets in Instructions

::: {.small}

Throughout course instructions, you will see things like `<GITHUB_ID>`

- Substitue your GitHub account name for the whole string, including brackets

. . . 

For me, if instructions say 

> `STA 9750 <GITHUB ID> Mini Project #00`

I will type

> `STA 9750 michaelweylandt Mini Project #00`

(no brackets)

:::

# How to Ask for Help

## How to Ask for Help {.scrollable}

Professional programming is at least half _looking things up_; 
at beginning stages, the fraction is even higher. 

So it's important to know how to see help _the smart way_:

1. Official documentation. Free software almost never becomes
   famous without great documentation: `R` and its packages
   are no exception. Everything we will use in this class has
   solid documentation. 

- [Tidyverse.org](https://tidyverse.org)

## How to Ask for Help

2. Search Engine. 

Most programming challenges have been faced by somebody 
before, so Google it!

::: {.smaller}

Tips: 

- Include `R` or `rstats` in your search query
- It's better to search _what you want to do_ rather 
  than _how you think you should do it_.
- Search programming Q&A sites like `StackOverflow` for specific
  code questions; blogs and course materials are better for "big
  picture" questions
  
:::

## How to Ask for Help

3. Ask on a Forum with a Reproducible Example

::: {.smaller}

Programming fora, like `StackOverflow`, are full of great
resources. Most of what you need is already there. But if
you need to ask a new question, make sure to create a [_minimal reproducible example_](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example/16532098)

Make it easy for your helper to help you. 

- Minimal: narrow down to as few lines of code as possible
- Reproducible: self-contained without dependencies on libraries
  (if can be avoided); load all packages needed; use standard data

*Pro-Tip*: You'll solve over 50% of your problems in
trying to create an MRE.

:::

## How to Ask for Help

Tips: 

::: {.smaller}

- Show the code, even if it doesn't work
- Send code as text, not screenshot (so your helper can run it)
- Smaller examples help narrow down problems
- Avoid IO (file input and output) unless specifically 
  relevant to problem
- Remove everything you can

:::

The _reprex_ `R` package helps with this: see [this talk](https://www.youtube.com/watch?v=5gqksthQ0cM).

For this class, rely on Piazza!

# Wrap-Up

## Upcoming Work

Upcoming work from [course calendar](../index.qmd#calendar)

::: {.incremental}

- [Pre-Assignment #03](../preassigns/pa03.html) due
- [Mini-Project #00](../miniprojects/mini00.html) due
- [Mini-Project #00](../miniprojects/mini00.html) peer feedback
  assigned
- [Mini-Project #01](../miniprojects/mini01.html) released
- [Course Project](../project.html) officially released

:::

## Looking Ahead

Course Project: 

- Start looking for teammates and topics

{{< include ../advice/professor_recs.qmd >}}


## Musical Treat

</br></br>

{{< video https://www.youtube.com/watch?v=rYcz-g8WpMc width="80%" height="400px">}}

