---
session: "`r session <- 5; session`"
class_date:
  "`r library(tidyverse); 
    tuesday_date <- read_csv('key_dates_tuesday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    thursday_date <- read_csv('key_dates_thursday.csv', name_repair='universal') |>
    filter(Course.Element == 'Class Session', 
           Item.Number == session) |>
    pull(Date) |> format('%a %Y-%m-%d'); 
    paste(c(tuesday_date, thursday_date), collapse=' <br>')`"
---

{{< include _setup.qmd >}}

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
DATES <- readr::read_csv("key_dates.csv") |>
    rename(element=`Course Element`,
           item=`Item Number`) |>
    mutate(dt = case_when(is.na(Time) ~ as.character(Date),
                          TRUE ~ paste(Date, "at", Time)))
```


# Today

## Today

- Course Administration
- PA#05 Review
- PA#05 FAQs
- Diving Deeper into Multi-Table Verbs
- Wrap-Up
  - Life Tip of the Day

## {{< var course.short >}} Mini-Project #01

Due in **6 Days** Four already submitted - fantastic! 

(Hopefully an excess of preparedness, not a last minute panic)

. . .


- **Submit early and submit often**
  - Less "last minute" tech support going forward
- Use Piazza and use your peers

*Very impressed* by Detailed Analyses, Fancy Tables, Graphics

You don't need fancy graphics yet, but I love to see 
*above and beyond*

## {{< var course.short >}} Mini-Project #01

Make sure your code is included in your submission

- [Code-Folding](https://quarto.org/docs/output-formats/html-code.html#folding-code) is very useful

. . . 

Follow submission instructions

- You need to have `mp01.qmd` and `docs/mp01.html` in your 
  `{{< var course.repo >}}` repository

- Helper function can verify submission is properly formatted

## {{< var course.short >}} Mini-Project #01

Your classmates have asked several excellent questions on Piazza. 

Reminders: 

- This data is _messy_ because NYC is messy
- Can handle by either (or a mix): 
  1) By fixing as many issues as possible
  2) By using 'robust' methods
- Document your choices and do your best
  

## {{< var course.short >}} Mini-Project #01 - Peer Feedback

To be assigned on GitHub in one week (March 5th):

- $\approx 4$ feedbacks each 
- Take this seriously: around 20\% of this assignment is "meta-review"
- Goal: _rigorous_ _constructive_ critique

Use [helper functions](https://michael-weylandt.com/STA9750/tips.html#find-peer-feedback-assigned-to-me) 
to find submissions assigned to you. Ask on Piazza if still having
trouble.

## {{< var course.short >}} Mini-Project #01 - Peer Feedback

Submissions may not map perfectly to rubric - use your best judgement

. . .

Learn from this! What can you adapt for MP#02? 

## {{< var course.short >}} Mini-Project #02

[MP#02 released](../miniprojcts/mini02.html) - Public Transit

. . .

**Due `r get_mp_deadline(2)`**

- GitHub post (used for peer feedback) AND Brightspace
- One Month: don't wait until the very end

. . .

Pay attention to [the rubric](../miniprojects/mini02.html#rubric)

-   Writing and presentation are about 50% of your grade
-   Evaluated on *rigor* and *thoughtfulness*, not necessarily correctness

## Upcoming Mini-Projects

Topics

-   MP#03: Spotify Analytics - `r get_mp_deadline(3)`
-   MP#04: Political Analysis - `r get_mp_deadline(4)`

## Pre-Assignments

Brightspace - Wednesdays at 11:45

- Reading, typically on course website
- Brightspace auto-grades
  - I have to manually change to completion grading

Next pre-assignment is **March 20th** - few weeks off

. . . 

Apologies for misleading question this week. I forgot to change it when giving
the extension

## Course Support

- Synchronous
  - Office Hours 2x / week
- Asynchronous
  - Piazza (<30 minute average response time)

. . . 

Long list of helpful resources added on Piazza, esp. [https://learnr.numbat.space/](https://learnr.numbat.space/)

. . . 

Ask questions! This course is demanding but rewarding. 

Social contract: I push you hard, but I also provide lots of support.

## Course Project

2 teams already formed

- Team 1: DL + DS + SG + VH
- Team 2: VG
- More to come
    
All team commitments due via email 
**`{r} DATES |> filter(str_detect(Details, "Team Roster Submission")) |> pull(dt)`**


## March 13th - Project Proposal Presentations

[Official Description](https://michael-weylandt.com/STA9750/project.html#project-proposal-presentations)

- **6 minute presentation**
- Key topics: 
  - _Animating Question_
  - _Team Roster_
- Also discuss: Possible specific questions, 
  data sources, analytical plan, anticipated challenges

# Pre-Assignment #05

## Multi-Table Analysis

*Multiple Tables*:

- More insights than from a single table
- Maintain 'tidy' structure throughout

Will create new (compound) rows - be ware of accidental over-duplication

## Primary Keys {.smaller}

_Keys_ are unique identifiers for individual records

- Primary (one column) or compound (multiple columns together) 

. . . 

The history of corporate IT is largely one of (failed) primary keys

- Finance: Tickers, Tickers + Exchange, Tickers + Share Class, CUSIP, ISIN,
  SEDOL, ... 
  
. . . 

Meaningful true keys are vanishingly rare - cherish them when you find them

Often 'unique enough' for an analysis

`dplyr::count` is helpful here

## Joins

Joins combine tables _by identity_ - not simple 'stacking' 

Specify a _join key_ - ideally this is an actual key, but doesn't have to be

In `dplyr`, we use the `join_by` function: 

```{r}
#| eval: false
#| echo: true
join_by(table_1_name == table_2_name)
```

Here `table_1_name` and `table_2_name` are column names from two tables

. . . 

Join rows where these values are equal (advanced joins possible)


## Inner and Outer Joins {.smaller}

When tables are perfectly matched, not an issue: 

```{r}
#| echo: true
library(dplyr)
x <- tribble(~college, ~campus_borough, 
             "CCNY", "Manhattan",
             "Baruch", "Manhattan", 
             "CSI", "Staten Island",
             "York", "Queens")

y <- tribble(~borough_name, ~bus_code,
             "Manhattan", "M",
             "Staten Island", "S", 
             "Queens", "Q")

inner_join(x, y, join_by(campus_borough == borough_name))
```

Default to `inner` but irrelevant

Note automatic repetition of `"M"` row

## Inner and Outer Joins

How to handle 'unaligned' values?

```{r}
#| echo: true
x <- tribble(~college, ~campus_borough, 
             "CCNY", "Manhattan",
             "Baruch", "Manhattan", 
             "CSI", "Staten Island",
             "York", "Queens", 
             "Medgar Evers", "Brooklyn")

inner_join(x, y, join_by(campus_borough == borough_name))
```

MEC vanished!

## Inner and Outer Joins {.smaller}

```{r}
#| echo: true
left_join(x, y, join_by(campus_borough == borough_name))
```

MEC stays, but no bus code - `NA` value

. . . 

- `inner_join` - Keep only matches
- `left_join` - Keep all rows in left (first) table even w/o matches
- `right_join` - Keep all rows in right (second) table even w/o matches
- `full_join` - Keep all rows from both tables, even w/o matches

`left_` and `right_` are types of 'outer' joins


# Pre-Assignment #05 FAQs

## FAQ: Subqueries

> [W]ill we be learning how to perform joins within a subquery?

You don't need subqueries in `R` since it's an imperative language. 
Just create a new variable to represent the result of the subquery
and use that in the next command. 

```
SELECT first_name, last_name
FROM collectors
WHERE id IN (
    SELECT collector_id
    FROM sales
);
```

```
collector_ids <- sales |> pull(collector_id)
collectors |> filter(id %in% collector_ids) |> select(first_name, last_name)
```

## FAQ: Data Integrity

> [H]ow can we ensure that the information [resulting from a join]
> is accurate and not repeated? 

1. If you have a true unique ID, you're usually safe
2. Pay attention to all warnings
3. Manually examine the result of any joins

## FAQ: Performance on Large Data Sets

> Will joining large data sets [...] affect performance?

Somewhat - larger data sets are always slower. 

Bigger danger is "bad joins" creating huge data automatically. 

Note that `R` is less "smart" than `SQL`, so won't optimize
execution order for you automatically.

## FAQ: What is the Role of `pivot_wider`?

> Is [`pivot_wider`] just for formatting? 

```{r}
#| echo: true
#| eval: true
library(dplyr); library(tidyr); library(palmerpenguins)
penguins |> drop_na() |> 
    group_by(sex, species) |> 
    summarize(weight = mean(body_mass_g)) |>
    pivot_wider(id_cols=species, 
                names_from=sex,
                values_from=weight) |>
    mutate(gender_diff = male - female)
```

## FAQ: `dplyr` joins vs `SQL` joins

> What is the difference between `dplyr` and `SQL` joins?

Not too much - biggest difference is no `INDEX` or `FOREIGN KEY`
in `R` so less guarantees of data integrity.

## FAQ: When to use `anti_join`?

Rare: looking for _unmatched_ rows. 
- Useful to find data integrity issues or 'implicit' missingness. 
- I use an `anti_join` to find students who haven't submitted an assignment.

## FAQ: `many-to-many` Warning

Tricky to address, but fortunately pretty rare. 

- `SQL` explicitly forbids many-to-many
- Usually a sign that a "key" isn't really unique
  - Check for duplicates in `x` and `y` tables
  - Can occur with "fancy" joins (rolling, inequality)
- Add additional join variables to break "duplication"

## FAQ: How to Check Efficiency? 

No automatic way. Some rules of thumb: 

- Don't create large tables just to filter down
  - filter before join when possible
- `full_outer` join is a bit dangerous
- `cross_join` is _rarely_ the right answer

## FAQ: `tidyr` vs `dplyr`

> Is `tidyr` more efficient than `dplyr`? 

Nope - different packages from the same developers. 

Designed to work together elegantly. 

## FAQ: Rare Joins

> Please explain what `cross_join`, filter joins, and `nest_join` are?

- `cross_join`: dangerous. 
  - Creates "all pairs" of rows. Useful for 'design' problems 
- filter joins (`anti_`, `semi_`): 
  - Hunting down quietly missing data.
  - Filtering to sub-samples
- `nest_join`: beyond this course. 
  - `left_join` with extra structure to output.

## FAQ: How to Pick a Join

> How do I decide which type of join is most approriate for a given analysis? 

Topic of today's work.

# Today

## Diving Deeper with `dplyr` - Joins and Pivots

Data Set: [`nycflights13`](https://nycflights13.tidyverse.org/)

Exercise: [Lab #05](../labs/lab05.html)

## Pivots

`pivot_` changes the shape of a data set

- Get ready for presentation
- Prep for a join
- Combine rows before looking at 'cross-row' structure

## Pivots

Q: Which penguin species has the largest between-sex mass difference? 

```{r}
#| echo: true
library(tidyr)
library(palmerpenguins)
avg_mass_tbl <- penguins |> drop_na() |> 
    group_by(sex, species) |> 
    summarize(avg_mass = mean(body_mass_g)) |> 
    ungroup()
avg_mass_tbl
```

## Pivots

We want data that is _wider_ than our current data: 

| species   | male_avg | female_avg | 
|-----------|----------|-------------
| Adelie    |...|...|
| Chinstrap |...|...|
| Gentoo    |...|...|


## Pivots
```{r}
#| echo: true
pivot_wider(avg_mass_tbl, 
            id_cols = species, 
            names_from=sex, 
            values_from=avg_mass)
```

```{r}
#| echo: true
pivot_wider(avg_mass_tbl, 
            id_cols = species, 
            names_from=sex, 
            values_from=avg_mass) |>
    mutate(sex_diff = male - female) |>
    slice_max(sex_diff)
```

## Pivots

`pivot_wider` Aguments:

- `id_cols`: kept as 'keys' for new table
- `names_from`: existing column 'spread' to create new
                columns names
- `values_from`: values in new table

. . . 

`pivot_longer`: 

- 'Inverse' operation
- Spread one row + multiple columns => one col + multiple rows

# Wrap-Up

## Upcoming Two Weeks

Next Wednesday (March 5th) at 11:45pm:

- MP#01 Initial Submission due
- Team membership due

. . . 

**No class on March 6th**

. . . 

Following Wednesday (March 12th) at 11:45pm:

- MP#01 Peer Feedback Due
- No Pre-Assignment

. . . 

**March 13th: Proposal Presentations**

{{< include ../advice/barnette.qmd >}}

